name: 'Docker'
description: 'Build, test, and deploy draft Docker artifacts'
inputs:
  working_directory:
    description: 'Github actions working directory'
    required: false
    default: '.'
  images:
    description: 'Newline separated list of images (without tags) to push, default is no push'
    required: false
  cache_from:
    description: 'Newline separated list of additional external cache sources'
    required: false
  platforms:
    description: 'Newline separated list of target platforms, default is linux/amd64'
    required: false
    default: 'linux/amd64'
  context:
    description: 'Docker build context directory, default is ./'
    required: false
  dockerfile:
    description: 'Path to the Dockerfile relative to the context, default is ./Dockerfile'
    required: false
  target:
    description: 'Sets the target stage to build'
    required: false

# TODO: add steps to deploy draft packages if tests pass

runs:
  using: "composite"

  steps:

    - uses: docker/setup-qemu-action@v2

    - id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host
        install: true

    - id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.images || env.LOCAL_IMAGE }}
        tags: |
          type=ref,event=tag
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=semver,pattern={{version}}

    - id: build
      uses: docker/build-push-action@v3
      with:
        platforms: ${{ inputs.platforms }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-to: type=gha,mode=max
        cache-from: |
          type=gha
          ${{ steps.meta.outputs.tags }}
          ${{ inputs.cache_from }}
        context: ${{  inputs.context || inputs.working_directory }}
        file: ${{ inputs.dockerfile }}
        target: ${{ inputs.target }}
        tags: ${{ env.LOCAL_IMAGE }}:latest
        load: false
        push: true

    - working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: |
        if [[ ! -z "${COMPOSE_VARS}" ]]; then
          echo $COMPOSE_VARS | base64 --decode > .env
        fi

    # give the local image a bunch of tags that can be referenced in docker-compose.test.yml
    # for example:
    #     "sut:latest",
    #     "product-os/flowzone:latest",
    #     "localhost:5000/sut:latest",
    #     "localhost:5000/sut:pr-5",
    #     "localhost:5000/sut:sha-3cf8975"
    - working-directory: ${{ inputs.working_directory }}
      shell: bash
      env:
        PLATFORMS: ${{ inputs.platforms }}
        TAGS: ${{ steps.meta.outputs.tags }}
      run: |
        for platform in $PLATFORMS
        do
          docker pull --platform=$platform ${{ env.LOCAL_IMAGE }}:latest
          docker tag ${{ env.LOCAL_IMAGE }}:latest sut:latest
          docker tag ${{ env.LOCAL_IMAGE }}:latest ${{ github.repository }}:latest
          for tag in $TAGS
          do
            docker tag ${{ env.LOCAL_IMAGE }}:latest ${tag}
          done
          docker inspect ${{ env.LOCAL_IMAGE }}:latest
          docker compose -f docker-compose.yml -f docker-compose.test.yml up --no-build --exit-code-from sut
        done

    - uses: akhilerm/tag-push-action@v2.0.0
      with:
        src: ${{ env.LOCAL_IMAGE }}:latest
        dst: |
          ${{ steps.meta.outputs.tags }}
