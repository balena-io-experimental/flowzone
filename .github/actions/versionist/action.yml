name: Versionist
description: apply opinionated versioning to a branch
inputs:
  default_repo_type:
    description: default repo type if repo.yml is not found
    required: false
    default: generic
  github_token:
    description: personal access Token for the GitHub service account with admin/owner permissions
    required: true
  gpg_private_key: GPG private key exported with `gpg --armor --export-secret-keys ...` to sign commits
    description:
    required: true
  passphrase: Passprase to decrypt GPG private key
    description:
    required: true
outputs:
  version:
    description: the project's version after running versionist
    value: ${{ steps.versionist.outputs.version }}

runs:
  using: composite

  steps:

    # TODO: finalize existing draft npm and docker releases

    # run an up-to-date fork of the balena-versionist action
    # - name: Run versionist
    #   id: versionist
    #   uses: klutchell/versionist@v0.5.0
    #   with:
    #     github_email: '${{ inputs.author_email }}'
    #     github_username: '${{ inputs.author_name }}'
    #     github_token: '${{ inputs.github_token }}'
    #     branch: '${{ inputs.branch }}'

    - uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    - name: Import GPG key for signing commits
      id: import-gpg
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    # TODO: rewrite this action to be a nodejs project
    - id: versionist
      shell: bash
      env:
        GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
      run: |
        npm install --location=global versionist@v6.7.1 balena-versionist@v0.14.5
        jq '.type' repo.yml 2>/dev/null || echo "type: ${{ inputs.default_repo_type }}" > repo.yml
        balena-versionist --silent=false
        VERSION="v$(head -n1 VERSION || jq -r '.version' package.json)"
        echo "::set-output name=version::${VERSION}"
        git add -A
        git commit -m "${VERSION}"
        git tag -a "${VERSION}" -m "${VERSION}"
        git push origin HEAD:${{ github.head_ref || github.ref }} --follow-tags
