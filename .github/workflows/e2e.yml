# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
name: e2e

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: JSON array of repositories
        required: false
        type: string
        default: >
          [
            "balena-io-modules/open-balena-base",
            "balena-io/balena-api",
            "balena-io/docs",
            "balena-io/environment-staging",
            "balena-os/balena-engine",
            "balena-os/fatrw",
            "product-os/environment-staging"
          ]
      flowzone_ref:
        description: Flowzone branch, or tag, or commit SHA
        required: false
        type: string
        default: master
      required_checks:
        description: JSON array of status checks
        required: false
        type: string
        default: >
          [
            "Flowzone / All tests",
            "Flowzone / All jobs"
          ]
      dry_run:
        description: Patch files but do not push changes
        required: false
        type: boolean
        default: false
      auto_close:
        description: Close the pull requests at the end of the run
        required: false
        type: boolean
        default: true
      token_app_id:
        description: GitHub App id to request a temporary token
        type: string
        required: false
        # https://github.com/organizations/product-os/settings/apps/flowzone-app
        default: "291899"
      token_installation_id:
        description: GitHub App installation id to request a temporary token
        type: string
        required: false
        default: ""

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ inputs.flowzone_ref }}
  cancel-in-progress: false

jobs:
  process_inputs:
    name: Process Inputs
    runs-on: ubuntu-latest
    timeout-minutes: 20

    outputs:
      matrix: ${{ steps.matrix.outputs.build }}

    steps:
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "${GITHUB_CONTEXT}" || true

      - name: Create repositories matrix
        id: matrix
        env:
          REPOS: ${{ inputs.repositories }}
          # https://github.com/organizations/product-os/settings/installations
          # https://github.com/organizations/balena-os/settings/installations
          # https://github.com/organizations/balena-io/settings/installations
          # https://github.com/organizations/balena-io-modules/settings/installations
          KNOWN_INSTALLATION_IDS: >
            {
              "balena-io-modules": 34046903,
              "balena-io": 34046749,
              "balena-os": 34046907,
              "product-os": 34040165
            }
        run: |
          echo "build=$(jq -cr --argjson installation_ids "${KNOWN_INSTALLATION_IDS}" '{
            include: map({
                repository: .,
                installation_id: $installation_ids[split("/")[0]] | tostring
            })
          }' <<< "${REPOS}")" >> $GITHUB_OUTPUT

  pull_request:
    name: Pull Request
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    needs: process_inputs

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.process_inputs.outputs.matrix) }}

    env:
      # https://cli.github.com/manual/gh_help_environment
      GH_REPO: ${{ matrix.repository }}
      GH_PROMPT_DISABLED: "true"
      GH_DEBUG: "true"
      GH_PAGER: "cat"

      PR_BRANCH: dispatch/flowzone-${{ inputs.flowzone_ref }}
      PR_TITLE: Test Flowzone @ ${{ inputs.flowzone_ref }}
      PR_BODY: |
        Auto-generated by https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      PR_LABELS: flowzone,e2e,do-not-merge,dispatch

    steps:
      # https://github.com/tibdex/github-app-token
      - name: Generate GitHub App token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.8.0
        id: gh_token
        with:
          app_id: ${{ inputs.token_app_id }}
          installation_id: ${{ inputs.token_installation_id || matrix.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          repository: ${{ matrix.repository }}
          permissions: >-
            {
              "actions": "read",
              "administration": "write",
              "checks": "read",
              "contents": "write",
              "members": "read",
              "metadata": "read",
              "pull_requests": "write",
              "statuses": "read",
              "workflows": "write"
            }

      # https://cli.github.com/manual/gh_api
      - name: Get repository settings
        id: repo
        env:
          GH_TOKEN: ${{ steps.gh_token.outputs.token }}
        run: |
          echo "default_branch=$(gh api repos/{owner}/{repo} --jq '.default_branch')" >> $GITHUB_OUTPUT

      # https://github.com/actions/checkout
      - name: Checkout base branch
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          repository: ${{ matrix.repository }}
          token: ${{ steps.gh_token.outputs.token }}
          ref: ${{ steps.repo.outputs.default_branch }}

      # https://github.com/crazy-max/ghaction-import-gpg
      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549 # v5.2.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      # update flowzone workflow to point to the provided git ref
      - name: Update workflow
        env:
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
          WORKFLOW_FILE: .github/workflows/flowzone.yml
        run: |
          yq '.jobs.flowzone.uses |= sub("(?P<uses>.+)@.+"; "$1@${{ inputs.flowzone_ref }}")' -i "${WORKFLOW_FILE}"
          yq '.jobs.flowzone.uses |= . line_comment="${{ github.run_id }}-${{ github.run_attempt }}"' -i "${WORKFLOW_FILE}"

          git add "${WORKFLOW_FILE}"
          git commit -m "patch: ${PR_TITLE}"

      # https://github.com/peter-evans/create-pull-request
      - name: Create pull request
        uses: peter-evans/create-pull-request@5b4a9f6a9e2af26e5f02351490b90d01eb8ec1e5 # v5.0.0
        if: inputs.dry_run != true
        id: cpr
        with:
          token: ${{ steps.gh_token.outputs.token }}
          branch: ${{ env.PR_BRANCH }}
          title: ${{ env.PR_TITLE }}
          body: |
            ${{ env.PR_BODY }}
          labels: |
            ${{ env.PR_LABELS }}
          draft: true
          delete-branch: true

      - name: Update summary
        if: steps.cpr.outputs.pull-request-number != ''
        run: |
          echo "Pull Request Number: ${{ steps.cpr.outputs.pull-request-number }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Pull Request URL: ${{ steps.cpr.outputs.pull-request-url }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Pull Request Operation: ${{ steps.cpr.outputs.pull-request-operation }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Pull Request Head SHA: ${{ steps.cpr.outputs.pull-request-head-sha }}" | tee -a $GITHUB_STEP_SUMMARY

      - name: Wait for required checks
        if: steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ steps.gh_token.outputs.token }}
          REQUIRED_CHECKS: ${{ inputs.required_checks }}
        run: |
          while true
          do
            sleep $(((RANDOM % 15) + 5))

            all_checks="$(gh pr checks ${{ steps.cpr.outputs.pull-request-number }} | cat)"

            while IFS='\n' read -r check
            do
              test -n "${check}" || continue 1
              status="$(echo "${check}" | awk -F'\t' '{print $2}')"

              case ${status} in
                pass|skipping|queued|pending)
                  continue 1
                  ;;
                *)
                  echo "::error::One or more jobs finished with status ${status}"
                  echo "${all_checks}" | awk -vSTATUS="${status}" -F'\t' '$2 == STATUS'
                  exit 1
                  ;;
              esac

            done <<< "${all_checks}"

            mapfile -t items < <(echo "${REQUIRED_CHECKS}" | jq -r '.[]')

            for required in "${items[@]}"
            do
              test -n "${required}" || continue 1
              status="$(echo "${all_checks}" | awk -vCHECK="${required}" -F'\t' '$1 == CHECK {print $2}')"

              case ${status} in
                pass)
                  continue 1
                  ;;
                queued|pending|"")
                  echo "Waiting for ${required}..."
                  echo "${all_checks}" | awk -vSTATUS="pending" -F'\t' '$2 == STATUS'
                  continue 2
                  ;;
                *)
                  echo "::error::A required job finished with status ${status}"
                  echo "${all_checks}" | awk -vSTATUS="${status}" -F'\t' '$2 == STATUS'
                  exit 1
                  ;;
              esac
            done

            break
          done

      # always close the PR and delete the branch
      - name: Close pull request
        if: |
          always() && inputs.auto_close == true && steps.cpr.outputs.pull-request-number != ''
        uses: peter-evans/close-pull@d7e13b3f091bf792add23a96ab7bff41f25074f8 # v3.0.0
        with:
          token: ${{ steps.gh_token.outputs.token }}
          repository: ${{ matrix.repository }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          comment: Auto-closing pull request
          delete-branch: true
