name: Flowzone

on:
  workflow_call:
    secrets:
      FLOWZONE_TOKEN:
        description: "Personal access token (PAT) for the GitHub service account with admin/owner permissions"
        required: true
      NPM_TOKEN:
        description: "The NPM auth token to use for publishing"
        required: true
      DOCKER_REGISTRY_USER:
        description: "Username to publish to the Docker Hub container registry"
        required: true
      DOCKER_REGISTRY_PASS:
        description: "A personal access token to publish to the Docker Hub container registry"
        required: true
      BALENA_API_KEY_PUSH:
        description: "API key for pushing releases to balena applications"
        required: true
      COMPOSE_VARS:
        description: "Optional base64 encoded docker-compose `.env` file for testing Docker images"
        required: false
      GPG_PRIVATE_KEY:
        description: "GPG private key exported with `gpg --armor --export-secret-keys ...` to sign commits"
        required: true
      GPG_PASSPHRASE:
        description: "Passphrase to decrypt GPG private key"
        required: true
    inputs:
      working_directory:
        description: "GitHub actions working directory"
        type: string
        required: false
        default: "."
      required_approving_review_count:
        description: "Setting this value to zero effectively means merge==deploy without approval(s)"
        type: string
        required: false
        default: "1"
      dockerhub_repo:
        description: "Docker Hub repository for Docker projects, skipped if empty"
        type: string
        required: false
      ghcr_repo:
        description: "GitHub Container Registry repository for Docker projects, skipped if empty"
        type: string
        required: false
        default: ${{ github.repository }}
      docker_cache_from:
        description: "Newline separated list of additional external cache sources"
        type: string
        required: false
      docker_platforms:
        description: "Newline separated list of Docker target platforms"
        type: string
        required: false
        default: |
          linux/amd64
          linux/arm64
          linux/arm/v7
      docker_context:
        description: "Docker build context directory"
        type: string
        required: false
      docker_file:
        description: "Path to the Dockerfile relative to the context"
        type: string
        required: false
      docker_target:
        description: "Sets the target stage to build"
        type: string
        required: false
      balena_slugs:
        description: "Newline separated list of balenaCloud apps, fleets, or blocks to deploy"
        type: string
        required: false
        default: |
          ${{ github.repository }}-amd64
          ${{ github.repository }}-aarch64
          ${{ github.repository }}-armv7hf
      node_versions:
        description: "Newline separated list of Node.js versions to test"
        type: string
        required: false
        default: |
          14.x
          16.x
          18.x

env:
  GHCR_USER: balena-ci # https://github.com/balena-ci

jobs:
  ###################################################
  ## COMMON EVENTS
  ###################################################

  inspect_source:
    name: Inspect source
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    outputs:
      npm: ${{ steps.npm.outputs.enabled }}
      docker: ${{ steps.docker.outputs.enabled }}
      balena: ${{ steps.balena.outputs.enabled }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.FLOWZONE_TOKEN }}

      # TODO: set output for versionbot: true|false
      # that can be used during versioning jobs

      - name: Check for package.json
        id: npm
        run: |
          if test -f "package.json"; then
            echo "found package.json"
            echo ::set-output name=enabled::"true"
          else
            echo ::set-output name=enabled::"false"
          fi

      - name: Check for docker-compose.test.yml
        id: docker
        run: |
          if [ -f docker-compose.test.yml ] && [ -f docker-compose.yml ]; then
            echo "found docker-compose.test.yml"
            echo ::set-output name=enabled::"true"
          else
            echo ::set-output name=enabled::"false"
          fi

      - name: Check for balena.yml
        id: balena
        run: |
          if test -f balena.yml
          then
            echo "found balena.yml"
            echo ::set-output name=enabled::"true"
          else
            echo ::set-output name=enabled::"false"
          fi

  sanitize_inputs:
    name: Sanitize inputs
    runs-on: ubuntu-latest

    outputs:
      balena_slugs: ${{ steps.balena_slugs.outputs.build }}
      docker_platforms: ${{ steps.docker_platforms.outputs.build }}
      node_versions: ${{ steps.node_versions.outputs.build }}
      ghcr_repo: ${{ steps.ghcr_repo.outputs.value }}
      dockerhub_repo: ${{ steps.dockerhub_repo.outputs.value }}

    steps:
      - name: Convert to a JSON array
        id: balena_slugs
        uses: kanga333/json-array-builder@v0.1.0
        with:
          str: ${{ inputs.balena_slugs }}
          separator: "newline"

      - name: Convert to a JSON array
        id: docker_platforms
        uses: kanga333/json-array-builder@v0.1.0
        with:
          str: ${{ inputs.docker_platforms }}
          separator: "newline"

      - name: Convert to a JSON array
        id: node_versions
        uses: kanga333/json-array-builder@v0.1.0
        with:
          str: ${{ inputs.node_versions }}
          separator: "newline"

      - name: Add ghcr.io prefix
        if: inputs.ghcr_repo != ''
        id: ghcr_repo
        run: |
          echo "::set-output name=value::$(echo ghcr.io/${{ inputs.ghcr_repo }})"

      - name: Add docker.io prefix
        if: inputs.dockerhub_repo != ''
        id: dockerhub_repo
        run: |
          echo "::set-output name=value::$(echo docker.io/${{ inputs.dockerhub_repo }})"

  protect-branch:
    name: Protect branch
    needs: [draft_docker, draft_npm, draft_balena]
    runs-on: ubuntu-latest
    # only run on PR open and synchronize events and when resinci is disabled or not found
    if: |
      !failure() && !cancelled() &&
      github.event_name == 'pull_request' && github.event.action != 'closed' &&
      github.base_ref == github.event.repository.default_branch

    outputs:
      result: ${{ steps.apply_branch_protection_rules.outputs.result }}

    defaults:
      run:
        working-directory: .
        shell: bash

    steps:
      - name: Apply branch protection rules
        id: apply_branch_protection_rules
        run: |
          url='${{ github.api_url }}/repos/${{ github.repository }}/branches/${{ github.event.repository.default_branch }}/protection'

          result="$(curl --silent -X PUT "${url}" \
            -H 'Accept: application/vnd.github+json' \
            -H 'Authorization: Bearer ${{ secrets.FLOWZONE_TOKEN }}' \
            -d '{
            "required_status_checks": {
              "strict": true,
              "contexts": [
                "Flowzone / Sanitize inputs",
                "Flowzone / Inspect source",
                "Flowzone / Protect branch",
                "Flowzone / Draft version",
                "Flowzone / Draft NPM",
                "Flowzone / Draft Docker",
                "Flowzone / Draft balena",
                "VersionBot/generate-version"
              ]
            },
            "enforce_admins": false,
            "required_pull_request_reviews": {
              "dismissal_restrictions": {
                "users": [],
                "teams": []
              },
              "dismiss_stale_reviews": false,
              "require_code_owner_reviews": false,
              "required_approving_review_count": ${{ inputs.required_approving_review_count }},
              "bypass_pull_request_allowances": {
                "users": [],
                "teams": []
              }
            },
            "restrictions": null,
            "required_linear_history": false,
            "allow_force_pushes": false,
            "allow_deletions": false,
            "block_creations": false,
            "required_conversation_resolution": false
          }')"

          echo ::set-output name=result::"${result}"

  ###################################################
  ## VERSION DRAFT JOBS
  ###################################################

  draft_version:
    name: Draft version
    runs-on: ubuntu-latest
    # only run on PR open or synchronize events
    if: github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.action != 'closed'
    needs: [inspect_source]

    defaults:
      run:
        working-directory: .
        shell: bash

    outputs:
      versionbot: ${{ steps.versionbot_checkout.outcome }}

    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'

      # TODO: is there a chance that this branch could be out of date?
      - name: Checkout versioned source
        id: versionbot_checkout
        continue-on-error: true
        uses: actions/checkout@v3
        with:
          ref: versionbot/pr/${{ github.event.pull_request.number }}
          fetch-depth: 2
          token: ${{ secrets.FLOWZONE_TOKEN }}

      # Fallback to unversioned source if versionbot branch does not exist
      - name: Checkout original source
        if: ${{ steps.versionbot_checkout.outcome == 'failure' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          token: ${{ secrets.FLOWZONE_TOKEN }}

      # https://github.com/actions/upload-artifact#maintaining-file-permissions-and-case-sensitive-files
      - name: Compress source
        run: tar -cvf /tmp/versioned-source.tar .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}
          path: /tmp/versioned-source.tar

  ###################################################
  ## NPM DRAFT JOBS
  ###################################################

  npm_matrix:
    name: NPM
    runs-on: ubuntu-latest
    needs: [draft_version, inspect_source, sanitize_inputs]
    if: needs.inspect_source.outputs.npm == 'true'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        node_version: ${{ fromJSON(needs.sanitize_inputs.outputs.node_versions) }}

    steps:
      - name: Download versioned source
        uses: actions/download-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}

      - name: Extract versioned source
        working-directory: .
        run: tar -xvf versioned-source.tar

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "${{ matrix.node_version }}"

      - name: Install dependencies
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Run build
        run: npm run build --if-present

      - name: Run tests
        run: npm test

  draft_npm:
    name: Draft NPM
    runs-on: ubuntu-latest
    needs: [npm_matrix]

    steps:
      - shell: bash
        run: echo "NPM jobs completed!"

    # TODO: push to npmjs

  ###################################################
  ## DOCKER DRAFT JOBS
  ###################################################

  docker_matrix:
    name: Docker
    runs-on: ubuntu-latest
    needs: [draft_version, inspect_source, sanitize_inputs]
    if: needs.inspect_source.outputs.docker == 'true'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    env:
      COMPOSE_VARS: ${{ secrets.COMPOSE_VARS }}
      LOCAL_IMAGE: localhost:5000/sut
      LOCAL_TAG: localhost:5000/sut:latest

    services:
      registry:
        image: registry:2.8.1
        ports:
          - 5000:5000

    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.sanitize_inputs.outputs.docker_platforms) }}

    steps:
      - name: Login to GitHub Container Registry
        if: ${{ needs.sanitize_inputs.outputs.ghcr_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Login to Docker Hub
        if: ${{ needs.sanitize_inputs.outputs.dockerhub_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

      - name: Download versioned source
        uses: actions/download-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}

      - name: Extract versioned source
        working-directory: .
        run: tar -xvf versioned-source.tar

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
          install: true

      - name: Sanitize suffix
        id: suffix
        run: |
          echo "::set-output name=string::$(echo ${{ matrix.platform }} | sed -e 's|linux/||' -e 's|/||')"

      - name: Generate Docker labels and tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.sanitize_inputs.outputs.ghcr_repo }}
            ${{ needs.sanitize_inputs.outputs.dockerhub_repo }}
            ${{ env.LOCAL_IMAGE }}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.ref }}
            type=ref,event=pr
            type=raw,value=${{ github.event.pull_request.head.sha }}
          flavor: |
            latest=false
            suffix=-${{ steps.suffix.outputs.string }}

      - name: Build and load
        id: build
        uses: docker/build-push-action@v3
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max
          cache-from: |
            type=gha
            ${{ steps.meta.outputs.tags }}
            ${{ inputs.docker_cache_from }}
          context: ${{ inputs.docker_context || inputs.working_directory }}
          file: ${{ inputs.docker_file }}
          target: ${{ inputs.docker_target }}
          # extra tags for convenience, can be used in docker-compose.test.yml
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ github.repository }}:latest
            sut:latest
            ${{ env.LOCAL_TAG }}
          load: true
          push: false

      - name: Run docker-compose tests
        run: |
          if [[ ! -z "${COMPOSE_VARS}" ]]; then
            echo ${COMPOSE_VARS} | base64 --decode > .env
          fi
          docker compose -f docker-compose.yml -f docker-compose.test.yml up --no-build --exit-code-from sut

      - name: Push image to local registry
        run: |
          docker push ${{ env.LOCAL_TAG }}

      - name: Push tags to public registries
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ env.LOCAL_TAG }}
          dst: |
            ${{ steps.meta.outputs.tags }}

  draft_docker:
    name: Draft Docker
    runs-on: ubuntu-latest
    needs: [docker_matrix, sanitize_inputs]
    if: needs.sanitize_inputs.outputs.ghcr_repo != '' || needs.sanitize_inputs.outputs.dockerhub_repo != ''

    defaults:
      run:
        working-directory: .
        shell: bash

    steps:
      - name: Login to GitHub Container Registry
        if: ${{ needs.sanitize_inputs.outputs.ghcr_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Generate Docker labels and tags
        id: ghcr_meta
        if: ${{ needs.sanitize_inputs.outputs.ghcr_repo != '' }}
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.sanitize_inputs.outputs.ghcr_repo }}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.ref }}
            type=ref,event=pr
          flavor: |
            latest=auto
            prefix=
            suffix=

      - name: Create multi-arch manifest
        if: ${{ needs.sanitize_inputs.outputs.ghcr_repo != '' }}
        uses: pixelfederation/gh-action-manifest-tool@v0.1.0
        with:
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.FLOWZONE_TOKEN }}
          platforms: ${{ join(fromJSON(needs.sanitize_inputs.outputs.docker_platforms)) }}
          template: ${{ needs.sanitize_inputs.outputs.ghcr_repo }}:${{ github.event.pull_request.head.sha }}-ARCHVARIANT
          target: ${{ needs.sanitize_inputs.outputs.ghcr_repo}}:${{ github.event.pull_request.head.sha }}
          # see https://github.com/estesp/manifest-tool to understand template

      - name: Push draft tags to Github Container Registry
        if: ${{ needs.sanitize_inputs.outputs.ghcr_repo != '' }}
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ needs.sanitize_inputs.outputs.ghcr_repo}}:${{ github.event.pull_request.head.sha }}
          dst: |
            ${{ steps.ghcr_meta.outputs.tags }}

      - name: Login to Docker Hub
        if: ${{ needs.sanitize_inputs.outputs.dockerhub_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

      - name: Generate Docker labels and tags
        id: dockerhub_meta
        if: ${{ needs.sanitize_inputs.outputs.dockerhub_repo != '' }}
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.sanitize_inputs.outputs.dockerhub_repo }}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.ref }}
            type=ref,event=pr
          flavor: |
            latest=auto
            prefix=
            suffix=

      - name: Create multi-arch manifest
        if: ${{ needs.sanitize_inputs.outputs.dockerhub_repo != '' }}
        uses: pixelfederation/gh-action-manifest-tool@v0.1.0
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}
          platforms: ${{ join(fromJSON(needs.sanitize_inputs.outputs.docker_platforms)) }}
          template: ${{ needs.sanitize_inputs.outputs.dockerhub_repo }}:${{ github.event.pull_request.head.sha }}-ARCHVARIANT
          target: ${{ needs.sanitize_inputs.outputs.dockerhub_repo}}:${{ github.event.pull_request.head.sha }}
          # see https://github.com/estesp/manifest-tool to understand template

      - name: Push draft tags to Docker Hub
        if: ${{ needs.sanitize_inputs.outputs.dockerhub_repo != '' }}
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ needs.sanitize_inputs.outputs.dockerhub_repo}}:${{ github.event.pull_request.head.sha }}
          dst: |
            ${{ steps.dockerhub_meta.outputs.tags }}

  ###################################################
  ## BALENA DRAFT JOBS
  ###################################################

  balena_matrix:
    name: balena
    runs-on: ubuntu-latest
    needs: [draft_version, inspect_source, sanitize_inputs]
    if: needs.inspect_source.outputs.balena == 'true'

    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.sanitize_inputs.outputs.balena_slugs) }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash

    steps:
      - name: Download versioned source
        uses: actions/download-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}

      - name: Extract versioned source
        working-directory: .
        run: tar -xvf versioned-source.tar

      - uses: balena-io/deploy-to-balena-action@v0.12.1
        with:
          balena_token: ${{ secrets.BALENA_API_KEY_PUSH }}
          fleet: ${{ matrix.slug }}
          versionbot: false
          source: ${{ inputs.working_directory }}

  draft_balena:
    name: Draft balena
    runs-on: ubuntu-latest
    needs: [balena_matrix]

    steps:
      - shell: bash
        run: echo "balena jobs completed!"

  ###################################################
  ## Finalize version
  ###################################################

  finalize_version:
    name: Finalize version
    needs: [sanitize_inputs, inspect_source]
    runs-on: ubuntu-latest
    # only run on PR merge events
    if: github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.pull_request.merged == true

    defaults:
      run:
        working-directory: .
        shell: bash

    outputs:
      sha: ${{ steps.versioned.outputs.sha }}
      tag: ${{ steps.versioned.outputs.tag }}

    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'

      - name: Download artifact
        id: download
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.FLOWZONE_TOKEN }}
          workflow_conclusion: success
          pr: ${{ github.event.pull_request.number }}
          name: versioned-source-${{ github.event.pull_request.head.sha }}
          search_artifacts: true

      - name: Extract source
        run: |
          mkdir -p /tmp/versioned-source
          tar -xvf versioned-source.tar -C /tmp/versioned-source

      - name: Parse version
        id: versioned
        working-directory: /tmp/versioned-source
        run: |
          echo "::set-output name=sha::$(git rev-parse HEAD)"
          echo "::set-output name=tag::v$(head -n1 VERSION || jq -r '.version' package.json)"

      - name: Import GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Checkout source
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Push versioned commit
        env:
          BRANCH: ${{ github.base_ref }}
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
          VERSION: ${{ steps.versioned.outputs.tag }}
          REV: ${{ steps.versioned.outputs.sha }}
        run: |
          git --git-dir=/tmp/versioned-source/.git format-patch -k -1 --stdout ${REV} | git am -3 -k
          git tag -a "${VERSION}" -m "${VERSION}"
          git push origin HEAD:${BRANCH} --follow-tags

  ###################################################
  ## DOCKER FINALIZE JOBS
  ###################################################

  finalize_docker:
    name: Finalize Docker
    needs: [sanitize_inputs, inspect_source, finalize_version]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && 
      github.event.pull_request.merged == true && needs.inspect_source.outputs.docker == 'true' &&
      (needs.sanitize_inputs.outputs.ghcr_repo != '' || needs.sanitize_inputs.outputs.dockerhub_repo != '')

    defaults:
      run:
        working-directory: .
        shell: bash

    steps:
      - name: Login to GitHub Container Registry
        if: ${{ needs.sanitize_inputs.outputs.ghcr_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Generate Docker labels and tags
        if: ${{ needs.sanitize_inputs.outputs.ghcr_repo != '' }}
        id: ghcr_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.sanitize_inputs.outputs.ghcr_repo }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.finalize_version.outputs.tag }}
            type=semver,pattern={{version}}
          flavor: |
            latest=true
            prefix=
            suffix=

      - name: Push final tags to GitHub Container Registry
        if: ${{ needs.sanitize_inputs.outputs.ghcr_repo != '' }}
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ needs.sanitize_inputs.outputs.ghcr_repo }}:${{ github.event.pull_request.head.sha }}
          dst: |
            ${{ steps.ghcr_meta.outputs.tags }}

      - name: Login to Docker Hub
        if: ${{ needs.sanitize_inputs.outputs.dockerhub_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

      - name: Generate Docker labels and tags
        if: ${{ needs.sanitize_inputs.outputs.dockerhub_repo != '' }}
        id: dockerhub_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.sanitize_inputs.outputs.dockerhub_repo }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.finalize_version.outputs.tag }}
            type=semver,pattern={{version}}
          flavor: |
            latest=true
            prefix=
            suffix=

      - name: Push final tags to Docker Hub
        if: ${{ needs.sanitize_inputs.outputs.dockerhub_repo != '' }}
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ needs.sanitize_inputs.outputs.dockerhub_repo }}:${{ github.event.pull_request.head.sha }}
          dst: |
            ${{ steps.dockerhub_meta.outputs.tags }}

  ###################################################
  ## BALENA FINALIZE JOBS
  ###################################################

  finalize_balena:
    name: Finalize balena
    needs: [sanitize_inputs, inspect_source, finalize_version]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.pull_request.merged == true && needs.inspect_source.outputs.balena == 'true'

    defaults:
      run:
        working-directory: .
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.sanitize_inputs.outputs.balena_slugs) }}

    steps:
      - uses: balena-io/deploy-to-balena-action@v0.12.1
        with:
          balena_token: ${{ secrets.BALENA_API_KEY_PUSH }}
          fleet: ${{ matrix.slug }}
          versionbot: false
          source: ${{ inputs.working_directory }}
###################################################
## TAG EVENTS
###################################################

# TBD
