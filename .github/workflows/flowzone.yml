# DO NOT EDIT MANUALLY - This file is auto-generated from `/flowzone.yml`
name: Flowzone
on:
  workflow_call:
    secrets:
      GH_APP_PRIVATE_KEY:
        description: GitHub App to generate ephemeral access tokens
        required: false
      FLOWZONE_TOKEN:
        description: .. or Personal Access Token (PAT) with admin/owner permissions in the org.
        required: false
      GPG_PRIVATE_KEY:
        description: GPG private key exported with `gpg --armor --export-secret-keys ...` to sign commits
        required: false
      GPG_PASSPHRASE:
        description: Passphrase to decrypt GPG private key
        required: false
      NPM_TOKEN:
        description: The npm auth token to use for publishing
        required: false
      DOCKERHUB_USER:
        description: Username to publish to the Docker Hub container registry
        required: false
      DOCKER_REGISTRY_USER:
        description: Deprecated, use DOCKERHUB_USER instead
        required: false
      DOCKERHUB_TOKEN:
        description: A personal access token to publish to the Docker Hub container registry
        required: false
      DOCKER_REGISTRY_PASS:
        description: Deprecated, use DOCKERHUB_TOKEN instead
        required: false
      BALENA_API_KEY:
        description: API key for pushing releases to balena applications
        required: false
      BALENA_API_KEY_PUSH:
        description: Deprecated, use BALENA_API_KEY instead
        required: false
      CARGO_REGISTRY_TOKEN:
        description: A personal access token to publish to a cargo registry
        required: false
      COMPOSE_VARS:
        description: Optional base64 encoded docker-compose `.env` file for testing Docker images
        required: false
      CF_ACCOUNT_ID:
        description: Cloudflare account ID
        required: false
      CF_API_TOKEN:
        description: Cloudflare API token with limited access for Pages projects
        required: false
      CUSTOM_JOB_SECRET_1:
        description: Optional secret for using with custom jobs
        required: false
      CUSTOM_JOB_SECRET_2:
        description: Optional secret for using with custom jobs
        required: false
      CUSTOM_JOB_SECRET_3:
        description: Optional secret for using with custom jobs
        required: false
    inputs:
      app_id:
        description: GitHub App id to impersonate
        type: string
        required: false
        default: ${{ vars.APP_ID || '291899' }}
      installation_id:
        description: GitHub App installation id
        type: string
        required: false
        default: ${{ vars.INSTALLATION_ID || '34040165' }}
      token_scope:
        description: Ephemeral token scope(s)
        type: string
        required: false
        default: |-
          {
            "actions": "read",
            "administration": "write",
            "checks": "read",
            "contents": "write",
            "members": "read",
            "metadata": "read",
            "organization_secrets": "read",
            "packages": "write",
            "pages": "write",
            "pull_requests": "read",
            "secrets": "read",
            "statuses": "read",
            "workflows": "read"
          }
      jobs_timeout_minutes:
        description: Timeout for the job(s).
        type: number
        required: false
        default: 360
      working_directory:
        description: GitHub actions working directory
        type: string
        required: false
        default: .
      docker_images:
        description: Comma-delimited string of Docker images (without tags) to publish (skipped if empty)
        type: string
        required: false
        default: ""
      bake_targets:
        description: Comma-delimited string of Docker buildx bake targets to publish (skipped if empty)
        type: string
        required: false
        default: default
      docker_invert_tags:
        description: Invert the tags for the Docker images (e.g. `{tag}-{variant}` becomes `{variant}-{tag}`)
        type: boolean
        required: false
        default: false
      balena_environment:
        description: balenaCloud environment
        type: string
        required: false
        default: balena-cloud.com
      balena_slugs:
        description: Comma-delimited string of balenaCloud apps, fleets, or blocks to deploy (skipped if empty)
        type: string
        required: false
        default: ""
      cargo_targets:
        description: Comma-delimited string of Rust stable targets to publish (skipped if empty)
        type: string
        required: false
        default: |
          aarch64-unknown-linux-gnu,
          armv7-unknown-linux-gnueabihf,
          arm-unknown-linux-gnueabihf,
          x86_64-unknown-linux-gnu,
          i686-unknown-linux-gnu
      rust_toolchain:
        description: Version specifier (e.g. 1.65, stable, nigthly) for the toolchain to use when building Rust sources
        type: string
        required: false
        default: stable
      rust_binaries:
        description: Set to true to publish Rust binary release artifacts to GitHub
        type: boolean
        required: false
        default: false
      repo_config:
        description: Set to true to standardise repository settings after a successful run
        type: boolean
        required: false
        default: false
      repo_allow_forking:
        description: Allow forking of an organization repository
        type: boolean
        required: false
        default: true
      repo_default_branch:
        description: Set the default branch name for the repository
        type: string
        required: false
        default: master
      repo_delete_branch_on_merge:
        description: Delete head branch when pull requests are merged
        type: boolean
        required: false
        default: true
      repo_allow_update_branch:
        description: Always suggest updating pull request branches
        type: boolean
        required: false
        default: true
      repo_description:
        description: Description of the repository
        type: string
        required: false
        default: ""
      repo_homepage:
        description: Repository home page URL
        type: string
        required: false
        default: ""
      repo_enable_auto_merge:
        description: Enable auto-merge functionality
        type: boolean
        required: false
        default: true
      repo_enable_issues:
        description: Enable issues in the repository
        type: boolean
        required: false
        default: true
      repo_enable_merge_commit:
        description: Enable merging pull requests via merge commit
        type: boolean
        required: false
        default: true
      repo_enable_projects:
        description: Enable projects in the repository
        type: boolean
        required: false
        default: false
      repo_enable_rebase_merge:
        description: Enable merging pull requests via rebase
        type: boolean
        required: false
        default: false
      repo_enable_squash_merge:
        description: Enable merging pull requests via squashed commit
        type: boolean
        required: false
        default: false
      repo_enable_wiki:
        description: Enable wiki in the repository
        type: boolean
        required: false
        default: false
      repo_visibility:
        description: Change the visibility of the repository to {public,private,internal}
        type: string
        required: false
        default: default
      disable_versioning:
        description: Set to true to disable automatic versioning
        type: boolean
        required: false
        default: false
      job_name:
        description: The name of the job, necessary for branch protection if not using the default of 'Flowzone'
        type: string
        required: false
        default: Flowzone
      checkout_fetch_depth:
        description: Configures the depth of the actions/checkout git fetch.
        type: number
        required: false
        default: 1
      tests_run_on:
        description: Deprecated, use 'custom_runs_on' input instead.
        type: string
        required: false
        default: ""
      runs_on:
        description: JSON array of runner label strings for generic jobs.
        type: string
        required: false
        default: |
          [
            "ubuntu-22.04"
          ]
      custom_runs_on:
        description: JSON 2-dimensional matrix of runner label strings for custom jobs.
        type: string
        required: false
        default: |
          [
            ["ubuntu-22.04"]
          ]
      docker_runs_on:
        description: JSON key-value pairs mapping platforms to arrays of runner labels. Unlisted platforms will use `runs_on`.
        type: string
        required: false
        default: "{}"
      cloudflare_website:
        description: Setting this to your existing CF pages project name will generate and deploy a website. Skipped if empty.
        type: string
        required: false
        default: ""
      docusaurus_website:
        description: Set to false to disable building a docusaurus website. If false the script `npm run deploy-docs` will be run if it exists.
        type: boolean
        required: false
        default: true
      github_prerelease:
        description: Finalize releases on merge.
        type: boolean
        required: false
        default: false
      restrict_custom_actions:
        description: Do not execute custom actions for external contributors. Only remove this restriction if custom actions have been vetted as secure.
        type: boolean
        required: false
        default: true
      custom_test_matrix:
        description: Comma-delimited string of values that will be passed to the custom test action.
        type: string
        required: false
        default: ""
      custom_publish_matrix:
        description: Comma-delimited string of values that will be passed to the custom publish action.
        type: string
        required: false
        default: ""
      custom_finalize_matrix:
        description: Comma-delimited string of values that will be passed to the custom finalize action.
        type: string
        required: false
        default: ""
      protect_branch:
        description: Set to false to disable updating branch protection rules after a successful run.
        type: boolean
        required: false
        default: true
      required_approving_review_count:
        description: Count of GitHub approved reviews required for Pull Requests to be merged. Set to 0 if using palantir/policy-bot for PR merge conditions.
        type: string
        required: false
        default: "0"
      required_status_checks:
        description: JSON array of status checks that must pass before a Pull Requests can be merged. Skipped if `protect_branch` is false.
        type: string
        required: false
        default: |
          [
            "Flowzone / All tests",
            "Flowzone / All jobs",
            "policy-bot: ${{ github.event.repository.default_branch }}"
          ]
concurrency:
  group: flowzone-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != github.base_ref }}
env:
  NPM_REGISTRY: https://registry.npmjs.org
  CARGO_REGISTRY: crates.io
jobs:
  is_pr_open:
    name: Is PR Open
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    if: |
      (
        github.event_name == 'pull_request' ||
        github.event_name == 'pull_request_target'
      ) && (
        github.event.action == 'opened' ||
        github.event.action == 'synchronize'
      )
    steps:
      - name: Reject external pull_request events
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "::error:External workflows can not be used with `pull_request` events. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Reject external pull_request events
        if: |
          github.event_name == 'pull_request_target' &&
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          echo "::error:Internal workflows should not be used with `pull_request_target` events. \
            Please consult the documentation for more information."
          exit 1
      - name: Check secrets
        run: |
          if [ -z '${{ secrets.FLOWZONE_TOKEN }}${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
            echo '::error::Must specify either GH_APP_PRIVATE_KEY or FLOWZONE_TOKEN.'
            false
          fi
      - name: Reject external workflow changes
        if: github.event.pull_request.head.repo.full_name != github.repository
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ $(gh pr diff ${{ github.event.pull_request.number }} --name-only) =~ ^\.github\/ ]]
          then
            echo "::error::Modifications to workflow files are not supported for external contributions. \
              Please contact a member of the organization for assistance."
            exit 1
          fi
      - name: Reject self-hosted runners
        if: |
          github.event.pull_request.head.repo.full_name != github.repository &&
          (
            contains(fromJSON(inputs.runs_on), 'self-hosted') ||
            contains(fromJSON(inputs.custom_runs_on), 'self-hosted') ||
            contains(fromJSON(inputs.custom_runs_on).*, 'self-hosted') ||
            contains(fromJSON(inputs.docker_runs_on).*, 'self-hosted')
          )
        run: |
          echo "::error:External workflows can not be used with self-hosted runners. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "${GITHUB_CONTEXT}" || true
  is_pr_closed:
    name: Is PR Closed
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    if: |
      (
        github.event_name == 'pull_request' ||
        github.event_name == 'pull_request_target'
      ) && (
        github.event.action == 'closed' &&
        github.event.pull_request.merged == false
      )
    steps:
      - name: Reject external pull_request events
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "::error:External workflows can not be used with `pull_request` events. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Reject external pull_request events
        if: |
          github.event_name == 'pull_request_target' &&
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          echo "::error:Internal workflows should not be used with `pull_request_target` events. \
            Please consult the documentation for more information."
          exit 1
      - name: Check secrets
        run: |
          if [ -z '${{ secrets.FLOWZONE_TOKEN }}${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
            echo '::error::Must specify either GH_APP_PRIVATE_KEY or FLOWZONE_TOKEN.'
            false
          fi
      - name: Reject external workflow changes
        if: github.event.pull_request.head.repo.full_name != github.repository
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ $(gh pr diff ${{ github.event.pull_request.number }} --name-only) =~ ^\.github\/ ]]
          then
            echo "::error::Modifications to workflow files are not supported for external contributions. \
              Please contact a member of the organization for assistance."
            exit 1
          fi
      - name: Reject self-hosted runners
        if: |
          github.event.pull_request.head.repo.full_name != github.repository &&
          (
            contains(fromJSON(inputs.runs_on), 'self-hosted') ||
            contains(fromJSON(inputs.custom_runs_on), 'self-hosted') ||
            contains(fromJSON(inputs.custom_runs_on).*, 'self-hosted') ||
            contains(fromJSON(inputs.docker_runs_on).*, 'self-hosted')
          )
        run: |
          echo "::error:External workflows can not be used with self-hosted runners. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "${GITHUB_CONTEXT}" || true
  is_pr_merged:
    name: Is PR Merged
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    if: |
      (
        github.event_name == 'pull_request' ||
        github.event_name == 'pull_request_target'
      ) && (
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true
      )
    steps:
      - name: Reject external pull_request events
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "::error:External workflows can not be used with `pull_request` events. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Reject external pull_request events
        if: |
          github.event_name == 'pull_request_target' &&
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          echo "::error:Internal workflows should not be used with `pull_request_target` events. \
            Please consult the documentation for more information."
          exit 1
      - name: Check secrets
        run: |
          if [ -z '${{ secrets.FLOWZONE_TOKEN }}${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
            echo '::error::Must specify either GH_APP_PRIVATE_KEY or FLOWZONE_TOKEN.'
            false
          fi
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "${GITHUB_CONTEXT}" || true
  is_pushed_tag:
    name: Is Pushed Tag
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check secrets
        run: |
          if [ -z '${{ secrets.FLOWZONE_TOKEN }}${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
            echo '::error::Must specify either GH_APP_PRIVATE_KEY or FLOWZONE_TOKEN.'
            false
          fi
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "${GITHUB_CONTEXT}" || true
  versioned_source:
    name: Versioned source
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - is_pr_merged
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_open.result != needs.is_pr_merged.result &&
      inputs.disable_versioning == false
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      tag: ${{ steps.versionist.outputs.tag }}
      semver: ${{ steps.versionist.outputs.semver }}
    steps:
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Checkout merge branch
        if: github.event_name == 'pull_request_target' && github.event.action != 'closed'
        id: checkout_merge
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: refs/pull/${{ github.event.number }}/merge
          token: ${{ steps.github_tokens.outputs.trusted || false }}
      - name: Checkout sha
        if: github.event_name != 'pull_request_target' || github.event.action == 'closed'
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ steps.github_tokens.outputs.trusted || false }}
      - name: Reject merge commits
        run: |
          if [ "$(git cat-file -p ${{ github.event.pull_request.head.sha || github.event.head_commit.id }} | grep '^parent ' | wc -l)" -gt 1 ]
          then
            echo "::error::Latest commit appears to be a merge, which is currently unsupported. Try a rebase instead."
            exit 1
          fi
      - name: Import GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Install versionist
        run: |
          npm install -g balena-versionist@0.14.12 versionist@6.9.2
      - name: Generate changelog
        env:
          GH_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
        run: |
          if [ ! -f .versionbot/CHANGELOG.yml ]
          then
            (cd ${{ runner.temp }}

            wget https://github.com/mikefarah/yq/releases/download/3.0.1/yq_linux_amd64 -O yq
            echo "a1097c74b81a2ef255583d9718bf4be6  yq" | md5sum -c -
            chmod +x yq

            PATH="${PWD}:${PATH}" $(npm root -g)/versionist/scripts/generate-changelog.sh "${GITHUB_WORKSPACE}"
            )
          fi
      - name: Run versionist
        id: versionist
        env:
          GITHUB_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
        run: |
          out="$(balena-versionist 2>&1)"
          error="$(awk '/Error:/{getline; print}' <<< "${out}")"

          case ${error} in
            "") # no error
              ;;
            'No such file or directory'*)
              echo "::error::${error}"
              ;;
            *)
              echo "::error::${error}"
              exit 1
              ;;
          esac

          git status --porcelain

          versions=()
          [ -f .versionbot/CHANGELOG.yml ] && versions+=($(yq e '.[0].version' .versionbot/CHANGELOG.yml))
          semver="${versions[0]}"

          echo "semver=${semver}" >> $GITHUB_OUTPUT
          echo "tag=v${semver}" >> $GITHUB_OUTPUT
      - name: Create versioned commit
        env:
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
          TAG: ${{ steps.versionist.outputs.tag }}
        run: |
          git add --all
          git commit -m "${TAG}"
          git tag -a "${TAG}" -m "${TAG}" -f
          git show -1
          git log -n 2
      - name: Push versioned commit
        if: needs.is_pr_merged.result == 'success'
        continue-on-error: true
        run: |
          git push origin HEAD:refs/heads/${{ github.base_ref }}
          # We push the tag separately so that it is only pushed if the commit push succeed, this avoids
          # issues if something else updates the main branch whilst we're running and causes us to push
          # the tag successfully but not the main branch and breaks future versioning attempts
          git push origin "refs/tags/${{ steps.versionist.outputs.tag }}"
      - name: Compress source
        run: tar -acvf ${{ runner.temp }}/source.tgz .
      - name: Upload artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}/source.tgz
          retention-days: 1
  tagged_source:
    name: Tagged source
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pushed_tag
      - is_pr_open
    if: |
      !failure() && !cancelled() &&
      needs.is_pushed_tag.result != needs.is_pr_open.result &&
      inputs.disable_versioning == true
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      tag: ${{ steps.version_tag.outputs.tag }}
      semver: ${{ steps.version_tag.outputs.semver }}
    steps:
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Checkout sha
        if: github.event_name != 'pull_request_target' || github.event.action == 'closed'
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ steps.github_tokens.outputs.trusted || false }}
      - name: Get version from tags
        id: version_tag
        run: |
          tag="$(git tag --points-at HEAD | tail -n1)"
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "semver=$(npx -q -y -- semver -c -l "${tag}")" >> $GITHUB_OUTPUT
          echo "describe=$(git describe --tags --always --dirty | cat)" >> $GITHUB_OUTPUT
      - name: Compress source
        run: tar -acvf ${{ runner.temp }}/source.tgz .
      - name: Upload artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}/source.tgz
          retention-days: 1
  is_npm:
    name: Is npm
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - versioned_source
      - tagged_source
    if: |
      !failure() && !cancelled() &&
      needs.versioned_source.result != needs.tagged_source.result
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      npm: ${{ steps.npm.outputs.enabled }}
      has_npm_lockfile: ${{ steps.npm_lock.outputs.has_npm_lockfile }}
      npm_private: ${{ steps.npm.outputs.private }}
      npm_docs: ${{ steps.npm.outputs.docs }}
      node_versions: ${{ steps.node_versions.outputs.json }}
      npm_access: ${{ steps.access.outputs.access }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Check for package.json
        id: npm
        run: |
          if test -f "package.json"
          then
            echo "found package.json"
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "private=$(jq -r '.private' package.json)" >> $GITHUB_OUTPUT
            echo "docs=$(jq -r '.scripts | has("doc")' package.json)" >> $GITHUB_OUTPUT
            echo "NODE_VERSIONS=[]" >> $GITHUB_ENV
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for package locks
        id: npm_lock
        run: |
          has_npm_lockfile="$([ -e package-lock.json ] || [ -e npm-shrinkwrap.json ] && echo true || echo false)"
          echo "has_npm_lockfile=${has_npm_lockfile}" >> $GITHUB_OUTPUT
      - name: Set access
        id: access
        run: |
          access="public"
          if [ "${{ github.event.repository.private }}" = "true" ]
          then
            access="restricted"
          fi
          echo "access=${access}" >> $GITHUB_OUTPUT
      - name: Setup Node.js 12.x
        if: steps.npm.outputs.enabled == 'true'
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: 12.x
      - name: Check engine
        if: steps.npm.outputs.enabled == 'true'
        run: |
          if npx -q -y -- check-engine
          then
            echo "NODE_VERSIONS=$(echo "${NODE_VERSIONS}" | jq -c '. + ["12.x"]')" >> $GITHUB_ENV
          fi
      - name: Setup Node.js 14.x
        if: steps.npm.outputs.enabled == 'true'
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: 14.x
      - name: Check engine
        if: steps.npm.outputs.enabled == 'true'
        run: |
          if npx -q -y -- check-engine
          then
            echo "NODE_VERSIONS=$(echo "${NODE_VERSIONS}" | jq -c '. + ["14.x"]')" >> $GITHUB_ENV
          fi
      - name: Setup Node.js 16.x
        if: steps.npm.outputs.enabled == 'true'
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: 16.x
      - name: Check engine
        if: steps.npm.outputs.enabled == 'true'
        run: |
          if npx -q -y -- check-engine
          then
            echo "NODE_VERSIONS=$(echo "${NODE_VERSIONS}" | jq -c '. + ["16.x"]')" >> $GITHUB_ENV
          fi
      - name: Setup Node.js 18.x
        if: steps.npm.outputs.enabled == 'true'
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: 18.x
      - name: Check engine
        if: steps.npm.outputs.enabled == 'true'
        run: |
          if npx -q -y -- check-engine
          then
            echo "NODE_VERSIONS=$(echo "${NODE_VERSIONS}" | jq -c '. + ["18.x"]')" >> $GITHUB_ENV
          fi
      - name: Set Node.js versions
        if: steps.npm.outputs.enabled == 'true'
        id: node_versions
        run: |
          echo "json=[\"16.x\"]" >> $GITHUB_OUTPUT
          if [ "${NODE_VERSIONS}" != "[]" ]
          then
            echo "json=${NODE_VERSIONS}" >> $GITHUB_OUTPUT
          fi
  is_docker:
    name: Is docker
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - versioned_source
      - tagged_source
    if: |
      !failure() && !cancelled() &&
      needs.versioned_source.result != needs.tagged_source.result
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      docker_images: ${{ steps.docker_images_json.outputs.build }}
      docker_images_crlf: ${{ steps.docker_images_crlf.outputs.build }}
      docker_compose_tests: ${{ steps.docker_compose_tests.outputs.found }}
      bake_targets: ${{ steps.bake_targets_json.outputs.build }}
      docker_bake_json: ${{ steps.docker_bake.outputs.json }}
      docker_bake_matrix: ${{ steps.docker_bake.outputs.matrix }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - id: docker_images_json
        name: Build JSON array from comma-separated list
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
        env:
          INPUT: ${{ inputs.docker_images }}
      - id: docker_images_crlf
        name: Build newline-separated list from JSON array
        run: |
          build="$(echo "${{ join(fromJSON(env.INPUT),' ') }}" | tr " " "\n")"
          echo "build<<EOF" >> $GITHUB_OUTPUT
          echo "${build}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          INPUT: ${{ steps.docker_images_json.outputs.build }}
      - id: bake_targets_json
        name: Build JSON array from comma-separated list
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
        env:
          INPUT: ${{ inputs.bake_targets }}
      - name: Check for docker compose test files
        id: docker_compose_tests
        run: |
          if [ -n "$(ls docker-compose.test.{yml,yaml} 2>/dev/null)" ]
          then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c
        with:
          version: v0.9.1
      - name: Pre-process Docker bake files
        id: docker_bake
        if: |
          join(fromJSON(steps.docker_images_json.outputs.build)) != '' ||
          steps.docker_compose_tests.outputs.found == 'true'
        env:
          BAKE_FILE: /tmp/docker-bake.json
          RUNS_ON: ${{ inputs.runs_on }}
          DOCKER_RUNS_ON: ${{ inputs.docker_runs_on }}
        run: |
          if [ -n "$(ls docker-bake{.override,}.{json,hcl} 2>/dev/null)" ]
          then
            files="$(echo $(ls -1 docker-bake{.override,}.{json,hcl} 2>/dev/null) | sed 's/ / -f /')"
          else
            echo '${{ steps.bake_targets_json.outputs.build }}' | jq -s '{target: (map({(.[]):{}}))}' > ${BAKE_FILE}
            files="${BAKE_FILE}"
          fi

          # log merged files and targets
          docker buildx bake --print ${{ join(fromJSON(steps.bake_targets_json.outputs.build),' ') }} -f ${files}

          json="$(docker buildx bake --print ${{ join(fromJSON(steps.bake_targets_json.outputs.build),' ') }} -f ${files} \
            | jq -cr '
              .target |= map_values(."inherits" += ["docker-metadata-action"]) |
              .target |= map_values(."platforms" //= ["linux/amd64"]) |
              del(.group."default") |
              if .group == {} then del(.group) else . end
            ')"

          matrix="$(jq -cr '.target | to_entries |
            {include: map(.value.platforms[] as $p |
            {target: .key, platform: $p}
          )}' <<< "${json}")"

          matrix="$(jq -cr --argjson in "$DOCKER_RUNS_ON" --argjson default "$RUNS_ON" '.include |=
            map(.platform as $p |
            .runs_on = if ($in | has($p)) then $in[$p] else $default end)' <<< "${matrix}")"

          echo "json=${json}">> $GITHUB_OUTPUT
          echo "matrix=${matrix}">> $GITHUB_OUTPUT
  is_python:
    name: Is python
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - versioned_source
      - tagged_source
    if: |
      !failure() && !cancelled() &&
      needs.versioned_source.result != needs.tagged_source.result
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      python_poetry: ${{ steps.python_poetry.outputs.enabled }}
      python_versions: ${{ steps.python_versions.outputs.json }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Check for Python Poetry pyproject.toml
        id: python_poetry
        run: |
          if test -f "pyproject.toml"
          then
            echo "found pyproject.toml"
            if grep 'build-backend.*poetry' pyproject.toml
            then
              echo "Poetry used"
              echo "enabled=true" >> $GITHUB_OUTPUT
              echo "PYTHON_VERSIONS=[]" >> $GITHUB_ENV
            else
              echo "Poetry not used"
              echo "enabled=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
      - name: Install Poetry
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          pipx install poetry
      - name: Set up Python 3.7
        if: steps.python_poetry.outputs.enabled == 'true'
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
        with:
          python-version: "3.7"
      - name: Check compatibility
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          error_check=`(poetry env use 3.7 2>&1 || true)`
          if ! grep -q "Please choose a compatible version" <<< $error_check
          then
            echo "PYTHON_VERSIONS=$(echo "${PYTHON_VERSIONS}" | jq -c '. + ["3.7"]')" >> $GITHUB_ENV
          else
            echo "Python 3.7 does not meet project requirements."
          fi
      - name: Set up Python 3.8
        if: steps.python_poetry.outputs.enabled == 'true'
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
        with:
          python-version: "3.8"
      - name: Check compatibility
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          error_check=`(poetry env use 3.8 2>&1 || true)`
          if ! grep -q "Please choose a compatible version" <<< $error_check
          then
            echo "PYTHON_VERSIONS=$(echo "${PYTHON_VERSIONS}" | jq -c '. + ["3.8"]')" >> $GITHUB_ENV
          else
            echo "Python 3.8 does not meet project requirements."
          fi
      - name: Set up Python 3.9
        if: steps.python_poetry.outputs.enabled == 'true'
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
        with:
          python-version: "3.9"
      - name: Check compatibility
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          error_check=`(poetry env use 3.9 2>&1 || true)`
          if ! grep -q "Please choose a compatible version" <<< $error_check
          then
            echo "PYTHON_VERSIONS=$(echo "${PYTHON_VERSIONS}" | jq -c '. + ["3.9"]')" >> $GITHUB_ENV
          else
            echo "Python 3.9 does not meet project requirements."
          fi
      - name: Set up Python 3.10
        if: steps.python_poetry.outputs.enabled == 'true'
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
        with:
          python-version: "3.10"
      - name: Check compatibility
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          error_check=`(poetry env use 3.10 2>&1 || true)`
          if ! grep -q "Please choose a compatible version" <<< $error_check
          then
            echo "PYTHON_VERSIONS=$(echo "${PYTHON_VERSIONS}" | jq -c '. + ["3.10"]')" >> $GITHUB_ENV
          else
            echo "Python 3.10 does not meet project requirements."
          fi
      - name: Set Python versions
        if: steps.python_poetry.outputs.enabled == 'true'
        id: python_versions
        run: |
          echo "json=[\"\^3.7\"]" >> $GITHUB_OUTPUT
          if [ "${PYTHON_VERSIONS}" != "[]" ]
          then
            echo "json=${PYTHON_VERSIONS}" >> $GITHUB_OUTPUT
          fi
  is_cargo:
    name: Is rust
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - versioned_source
      - tagged_source
    if: |
      !failure() && !cancelled() &&
      needs.versioned_source.result != needs.tagged_source.result &&
      inputs.cargo_targets != ''
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      cargo_targets: ${{ steps.cargo_targets.outputs.build }}
      cargo: ${{ steps.cargo_yml.outputs.enabled }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - id: cargo_targets
        name: Build JSON array from comma-separated list
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
        env:
          INPUT: ${{ inputs.cargo_targets }}
      - name: Check Cargo.toml
        id: cargo_yml
        run: |
          if test -f "Cargo.toml"
          then
            echo "found Cargo.toml"
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
  is_balena:
    name: Is balena
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - versioned_source
      - tagged_source
    if: |
      !failure() && !cancelled() &&
      needs.versioned_source.result != needs.tagged_source.result &&
      inputs.balena_slugs != ''
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      balena_slugs: ${{ steps.balena_slugs.outputs.build }}
      balena_yml: ${{ steps.balena_yml.outputs.enabled }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - id: balena_slugs
        name: Build JSON array from comma-separated list
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
        env:
          INPUT: ${{ inputs.balena_slugs }}
      - name: Check for balena.yml
        id: balena_yml
        run: |
          if test -f balena.yml
          then
            echo "found balena.yml"
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
  is_custom:
    name: Is custom
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - versioned_source
      - tagged_source
    if: |
      !failure() && !cancelled() &&
      needs.versioned_source.result != needs.tagged_source.result
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      custom_test: ${{ steps.custom.outputs.test }}
      custom_publish: ${{ steps.custom.outputs.publish }}
      custom_finalize: ${{ steps.custom.outputs.finalize }}
      custom_clean: ${{ steps.custom.outputs.clean }}
      custom_always: ${{ steps.custom.outputs.always }}
      custom_test_matrix: ${{ steps.custom_test_matrix.outputs.build }}
      custom_publish_matrix: ${{ steps.custom_publish_matrix.outputs.build }}
      custom_finalize_matrix: ${{ steps.custom_finalize_matrix.outputs.build }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - id: custom_test_matrix
        name: Build JSON array from comma-separated list
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
        env:
          INPUT: ${{ inputs.custom_test_matrix }}
      - id: custom_publish_matrix
        name: Build JSON array from comma-separated list
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
        env:
          INPUT: ${{ inputs.custom_publish_matrix }}
      - id: custom_finalize_matrix
        name: Build JSON array from comma-separated list
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
        env:
          INPUT: ${{ inputs.custom_finalize_matrix }}
      - name: Check for custom actions
        if: github.event.pull_request.head.repo.full_name == github.repository || inputs.restrict_custom_actions == false
        id: custom
        run: |
          if [ -d .github/actions/test ]
          then
            echo "test=true" >> $GITHUB_OUTPUT
          fi
          if [ -d .github/actions/publish ]
          then
            echo "publish=true" >> $GITHUB_OUTPUT
          fi
          if [ -d .github/actions/finalize ]
          then
            echo "finalize=true" >> $GITHUB_OUTPUT
          fi
          if [ -d .github/actions/clean ]
          then
            echo "clean=true" >> $GITHUB_OUTPUT
          fi
          if [ -d .github/actions/always ]
          then
            echo "always=true" >> $GITHUB_OUTPUT
          fi
  is_website:
    name: Is website
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - versioned_source
      - tagged_source
    if: |
      !failure() && !cancelled() &&
      needs.versioned_source.result != needs.tagged_source.result &&
      inputs.cloudflare_website != ''
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      has_readme: ${{ steps.has_readme.outputs.enabled }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Check for README for building a website
        id: has_readme
        run: |
          if test -e "README.md"
          then
            echo "found README.md"
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
  npm_test:
    name: Test npm
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_npm
      - is_pr_open
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_open.result == 'success' &&
      needs.is_npm.outputs.npm == 'true'
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        node_version: ${{ fromJSON(needs.is_npm.outputs.node_versions) }}
    outputs:
      package: ${{ steps.meta.outputs.package }}
      version: ${{ steps.meta.outputs.version }}
      branch_tag: ${{ steps.meta.outputs.branch_tag }}
      sha_tag: ${{ steps.meta.outputs.sha_tag }}
      version_tag: ${{ steps.meta.outputs.version_tag }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Setup Node.js - Cached
        if: needs.is_npm.outputs.has_npm_lockfile == 'true'
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: ${{ env.NPM_REGISTRY }}
          cache: npm
      - name: Setup Node.js
        if: needs.is_npm.outputs.has_npm_lockfile != 'true'
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: ${{ env.NPM_REGISTRY }}
      - name: Generate metadata
        id: meta
        run: |
          package="$(jq -r '.name' package.json)"
          version="$(jq -r '.version' package.json)"
          branch_tag="$(echo 'build-${{ github.event.pull_request.head.ref }}' | sed 's/[^[:alnum:]]/-/g')"
          sha_tag="${branch_tag}-${{ github.event.pull_request.head.sha }}"
          version_tag="${version}-${branch_tag}-${{ github.event.pull_request.head.sha }}"

          echo "package=${package}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "branch_tag=${branch_tag}" >> $GITHUB_OUTPUT
          echo "sha_tag=${sha_tag}" >> $GITHUB_OUTPUT
          echo "version_tag=${version_tag}" >> $GITHUB_OUTPUT
      - name: Install native dependencies (if necessary)
        run: |
          npm run flowzone-preinstall --if-present
      - name: Install dependencies
        run: |
          runner_os="$(echo "${RUNNER_OS}" | tr '[:upper:]' '[:lower:]')"
          os_count="$(jq '.os | length' package.json)"
          index="$(jq --arg os "${runner_os}" '.os | index($os) | select( . != null )' package.json)"

          if [[ -n "$index" ]] || [[ "$os_count" -lt 1 ]]; then
              if [ ${{ needs.is_npm.outputs.has_npm_lockfile }} == 'true' ]; then
                npm ci
              else
                npm i
              fi
          else
              echo "${runner_os} is not supported in package.json"
          fi
      - name: Run build
        run: npm run build --if-present
      - name: Run tests
        run: npm test
      - name: Run pack
        run: |
          mkdir ${{ runner.temp }}/npm-pack && npm pack --pack-destination=${{ runner.temp }}/npm-pack

          # FIXME: workaround when `npm pack` for npm 6.x dumps tarball into the current directory because it has no `--pack-destination` flag
          [[ "$(npm --version)" =~ ^6\..* ]] && find . -maxdepth 1 -name '*.tgz' -exec mv {} ${{ runner.temp }}/npm-pack \; || true
      - name: Upload artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: npm-${{ github.event.pull_request.head.sha }}-${{ matrix.node_version }}
          path: ${{ runner.temp }}/npm-pack/*.tgz
          retention-days: 90
      - name: Generate docs (if present)
        if: needs.is_npm.outputs.npm_docs == 'true'
        shell: bash
        run: npm run doc
      - name: Compress docs
        if: needs.is_npm.outputs.npm_docs == 'true'
        run: tar -acvf ${{ runner.temp }}/docs.tgz ./docs
      - name: Upload artifact
        if: needs.is_npm.outputs.npm_docs == 'true'
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: docs-${{ github.event.pull_request.head.sha }}-${{ matrix.node_version }}
          path: ${{ runner.temp }}/docs.tgz
          retention-days: 90
  npm_publish:
    name: Publish npm
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_npm
      - npm_test
      - custom_test
      - docker_test
      - cargo_test
      - python_test
    if: |
      !failure() && !cancelled() &&
      needs.npm_test.result == 'success' &&
      needs.is_npm.outputs.npm_private != 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download npm artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          path: ${{ runner.temp }}
          name: npm-${{ github.event.pull_request.head.sha }}-${{ fromJSON(needs.is_npm.outputs.node_versions)[0] }}
      - name: Setup Node.js
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: "18"
          registry-url: ${{ env.NPM_REGISTRY }}
      - name: Publish draft release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set ignore-scripts true

          pack="$(ls ${{ runner.temp }}/*.tgz | sort -t- -n -k3 | tail -n1)"
          tar xvf "${pack}"
          (cd package
            npm --loglevel=verbose --logs-max=0 --no-git-tag-version version ${{ needs.npm_test.outputs.version_tag }}-${{ github.run_attempt }} --allow-same-version
          )
          tar czvf "${pack}" package

          if [ ${{ github.run_attempt }} -gt  1 ]; then
            npm --loglevel=verbose --logs-max=0 unpublish ${{ needs.npm_test.outputs.package }}@${{ needs.npm_test.outputs.version_tag }}-$((${{ github.run_attempt }} - 1)) || true
          fi
          npm --loglevel=verbose --logs-max=0 publish --tag=${{ needs.npm_test.outputs.sha_tag }} "${pack}" --access="${{ needs.is_npm.outputs.npm_access }}"
          npm --loglevel=verbose --logs-max=0 dist-tag add ${{ needs.npm_test.outputs.package }}@${{ needs.npm_test.outputs.version_tag }}-${{ github.run_attempt }} ${{ needs.npm_test.outputs.branch_tag }}
  npm_finalize:
    name: Finalize npm
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_merged
      - is_pushed_tag
      - is_npm
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_merged.result != needs.is_pushed_tag.result &&
      needs.is_npm.outputs.npm == 'true' &&
      needs.is_npm.outputs.npm_private != 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Download npm artifact from last run
        uses: dawidd6/action-download-artifact@5e780fc7bbd0cac69fc73271ed86edf5dcb72d67
        with:
          github_token: ${{ steps.github_tokens.outputs.trusted || false }}
          commit: ${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
          workflow_conclusion: success
          name: npm-${{ github.event.pull_request.head.sha }}-${{ fromJSON(needs.is_npm.outputs.node_versions)[0] }}
      - name: Setup Node.js
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: "18"
          registry-url: ${{ env.NPM_REGISTRY }}
      - name: Publish final release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set ignore-scripts true
          pack="$(ls ${{ runner.temp }}/*.tgz | sort -t- -n -k3 | tail -n1)"
          npm --loglevel=verbose --logs-max=0 publish --tag "latest" "${pack}" --access="${{ needs.is_npm.outputs.npm_access }}"
  npm_docs_finalize:
    name: Finalize npm docs
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_merged
      - is_pushed_tag
      - is_npm
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_merged.result != needs.is_pushed_tag.result &&
      needs.is_npm.outputs.npm_docs == 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Download npm docs artifact from last run
        uses: dawidd6/action-download-artifact@5e780fc7bbd0cac69fc73271ed86edf5dcb72d67
        with:
          github_token: ${{ steps.github_tokens.outputs.trusted || false }}
          commit: ${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
          workflow_conclusion: success
          name: docs-${{ github.event.pull_request.head.sha }}-${{ fromJSON(needs.is_npm.outputs.node_versions)[0] }}
      - name: Extract docs artifact
        run: |
          docs="$(ls ${{ runner.temp }}/*.tgz | sort -t- -n -k3 | tail -n1)"
          tar -xvf "${docs}"
      - name: Publish generated docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@bd8c6b06eba6b3d25d72b7a1767993c0aeee42e7
        with:
          github_token: ${{ steps.github_tokens.outputs.trusted || false }}
          publish_dir: docs
          publish_branch: docs
  docker_test:
    name: Test docker
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - is_docker
    if: |
      !failure() && !cancelled() &&
      needs.is_docker.result == 'success' &&
      needs.is_pr_open.result == 'success' &&
      needs.is_docker.outputs.docker_bake_json != ''
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.is_docker.outputs.docker_bake_matrix) }}
    env:
      DOCKER_BUILDKIT: "1"
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Get version from tags
        id: version_tag
        run: |
          tag="$(git tag --points-at HEAD | tail -n1)"
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "semver=$(npx -q -y -- semver -c -l "${tag}")" >> $GITHUB_OUTPUT
          echo "describe=$(git describe --tags --always --dirty | cat)" >> $GITHUB_OUTPUT
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Setup QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
        if: contains(matrix.runs_on, 'self-hosted') != true
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v6.2.0
      - name: Setup buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c
        with:
          driver-opts: network=host
          install: true
      - name: Sanitize target strings
        id: strings
        env:
          raw_target: ${{ matrix.target }}
          raw_platform: ${{ matrix.platform }}
        run: |
          target="$(echo "${raw_target}" | sed 's/[^[:alnum:]]/-/g')"
          echo "target=${target}" >> $GITHUB_OUTPUT

          if [ "${target}" != 'default' ]
          then
            if [ "${{ inputs.docker_invert_tags }}" = "true" ]
            then
              echo "prefix=${target}-" >> $GITHUB_OUTPUT
            else
              echo "suffix=-${target}" >> $GITHUB_OUTPUT
            fi
          fi

          if [ -n "${raw_platform}" ]
          then
            echo "platform=$(echo "${raw_platform}" | sed 's/[^[:alnum:]]/-/g')" >> $GITHUB_OUTPUT
          fi
      - name: Generate image labels and sut tags
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96
        with:
          images: |
            sut
            localhost:5000/sut
            ${{ needs.is_docker.outputs.docker_images_crlf }}
            ${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.strings.outputs.target }}
            type=raw,value=${{ steps.strings.outputs.platform }}
          labels: org.opencontainers.image.version=${{ steps.version_tag.outputs.semver }}
          flavor: |
            latest=true
      - name: Login to GitHub Container Registry
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event.repository.private
      - name: Login to Docker Hub
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}
        if: github.event.repository.private
      - name: Export common env vars
        run: |
          echo "DOCKER_BAKE_FILE=${{ runner.temp }}/docker-bake.json" >> $GITHUB_ENV
          echo "DOCKER_TAR=${{ runner.temp }}/docker.tar" >> $GITHUB_ENV

          echo "COMPOSE_PROJECT_NAME=${{ github.run_id }}" >> $GITHUB_ENV
          echo "COMPOSE_FILE=${{ runner.temp }}/docker-compose.yml" >> $GITHUB_ENV
          echo "COMPOSE_ENV_FILE=${{ runner.temp }}/.env" >> $GITHUB_ENV
      - name: Inject COMPOSE_VARS
        if: github.event.pull_request.head.repo.full_name == github.repository
        env:
          COMPOSE_VARS: ${{ secrets.COMPOSE_VARS }}
        shell: bash
        run: |
          if [ -n "${COMPOSE_VARS}" ]
          then
            echo "${COMPOSE_VARS}" | base64 --decode > ${COMPOSE_ENV_FILE}

            while read -r line
            do
              secret="$(echo "${line}" | awk -F'=' '{print $2}')"
              echo "::add-mask::${secret}"
            done < ${COMPOSE_ENV_FILE}
          fi
      - name: Inject GITHUB_TOKEN
        env:
          GITHUB_TOKEN: ${{ steps.github_tokens.outputs.untrusted }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.untrusted }}
        shell: bash
        run: |
          if ! grep -q '^GH_TOKEN=' ${COMPOSE_ENV_FILE}
          then
            echo "GH_TOKEN=${GH_TOKEN}" >> ${COMPOSE_ENV_FILE}
          fi

          if ! grep -q '^GITHUB_TOKEN=' ${COMPOSE_ENV_FILE}
          then
            echo "GITHUB_TOKEN=${GITHUB_TOKEN}" >> ${COMPOSE_ENV_FILE}
          fi
      - name: Write docker bake file
        run: |
          echo '${{ needs.is_docker.outputs.docker_bake_json }}' > "${DOCKER_BAKE_FILE}"
          jq . "${DOCKER_BAKE_FILE}"
      - name: Write docker compose file
        if: needs.is_docker.outputs.docker_compose_tests == 'true'
        run: |
          files="
            docker-compose.yml
            docker-compose.yaml
            docker-compose.test.yml
            docker-compose.test.yaml
          "

          args=""
          for file in ${files}
          do
            test -f "${file}" || continue
            args="${args} -f ${file}"

            if [ ! -f .env ]
            then
              yq '.services.*.env_file |= map(with(select(. == ".env") ; . = "${{ env.COMPOSE_ENV_FILE }}"))' -i "${file}"
            fi
          done

          docker compose --env-file="${COMPOSE_ENV_FILE}" --project-directory="$(pwd)" ${args} config > "${COMPOSE_FILE}"

          yq '(.services.* | select(.build != null)).platform |= "${{ matrix.platform }}"' -i "${COMPOSE_FILE}"
          yq . "${COMPOSE_FILE}"
      - name: Docker bake
        id: docker_bake
        uses: docker/bake-action@6c87dcca988e4e074e3ab1f976a70f63ec9673fb
        env:
          GITHUB_TOKEN: ${{ steps.github_tokens.outputs.untrusted }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.untrusted }}
        with:
          workdir: ${{ inputs.working_directory }}
          files: |
            ${{ env.DOCKER_BAKE_FILE }}
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ matrix.target }}
          set: |
            *.platform=${{ matrix.platform }}
            *.secrets=id=GITHUB_TOKEN
            *.secrets=id=GH_TOKEN
            *.cache-to=type=gha,mode=min,scope=${{ github.head_ref }}-${{ matrix.target }}-${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ github.head_ref }}-${{ matrix.target }}-${{ matrix.platform }}
          load: true
      - name: Run docker compose tests
        if: needs.is_docker.outputs.docker_compose_tests == 'true'
        run: |
          docker compose up sut --exit-code-from sut || { docker compose logs ; exit 1 ; }
          docker compose logs
      - name: Save image to file
        run: |
          docker save ${{ fromJSON(steps.meta.outputs.json).tags[0] }} > ${DOCKER_TAR}
          gzip -v ${DOCKER_TAR}
      - name: Upload artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: docker-${{ github.event.pull_request.head.sha }}-${{ steps.strings.outputs.target }}-${{ steps.strings.outputs.platform }}
          path: ${{ env.DOCKER_TAR }}.gz
          retention-days: 1
  docker_publish:
    name: Publish docker
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_docker
      - npm_test
      - custom_test
      - docker_test
      - cargo_test
      - python_test
    if: |
      !failure() && !cancelled() &&
      needs.docker_test.result == 'success' &&
      join(fromJSON(needs.is_docker.outputs.docker_images)) != ''
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    services:
      registry:
        image: registry:2.8.1
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.is_docker.outputs.bake_targets) }}
    env:
      LOCAL_TAG: localhost:5000/sut:latest
    steps:
      - name: Warn if tests skipped
        if: needs.is_docker.outputs.docker_compose_tests != 'true'
        run: echo "::warning::Publishing Docker images without docker compose tests!"
      - name: Download all artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          path: ${{ runner.temp }}
      - name: Sanitize target strings
        id: strings
        env:
          raw_target: ${{ matrix.target }}
          raw_platform: ${{ matrix.platform }}
        run: |
          target="$(echo "${raw_target}" | sed 's/[^[:alnum:]]/-/g')"
          echo "target=${target}" >> $GITHUB_OUTPUT

          if [ "${target}" != 'default' ]
          then
            if [ "${{ inputs.docker_invert_tags }}" = "true" ]
            then
              echo "prefix=${target}-" >> $GITHUB_OUTPUT
            else
              echo "suffix=-${target}" >> $GITHUB_OUTPUT
            fi
          fi

          if [ -n "${raw_platform}" ]
          then
            echo "platform=$(echo "${raw_platform}" | sed 's/[^[:alnum:]]/-/g')" >> $GITHUB_OUTPUT
          fi
      - name: Decompress artifacts
        run: |
          for file in ${{ runner.temp }}/*/docker.tar.gz
          do
            gzip -vd "${file}"
          done
      - name: Generate image tags
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96
        with:
          images: |
            ${{ needs.is_docker.outputs.docker_images_crlf }}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.sha }}
            type=raw,value=build-${{ github.event.pull_request.head.ref }}
          flavor: |
            latest=false
            prefix=${{ steps.strings.outputs.prefix }}
            suffix=${{ steps.strings.outputs.suffix }}
      - name: Create manifest
        id: manifest
        run: |
          platforms="$(echo '${{ needs.is_docker.outputs.docker_bake_matrix }}' | \
            jq -r '.include[] | select(.target == "${{ matrix.target}}") | .platform' | \
            sed 's/[^[:alnum:]]/-/g')"

          for platform in ${platforms}
          do
            tar=${{ runner.temp }}/docker-${{ github.event.pull_request.head.sha }}-${{ steps.strings.outputs.target }}-${platform}/docker.tar
            platform_tag="localhost:5000/sut:${platform}"

            loaded="$(docker load -i "${tar}" | grep '^Loaded image:' | awk '{print $NF}')"
            echo "${loaded}" | xargs -I{} docker tag {} "${platform_tag}"

            docker inspect "${platform_tag}"
            docker push "${platform_tag}"

            docker buildx imagetools create -t ${LOCAL_TAG} --append "${platform_tag}" || \
              docker buildx imagetools create -t ${LOCAL_TAG} "${platform_tag}"
          done
      - name: Login to GitHub Container Registry
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}
      - name: Publish draft tags
        if: join(fromJSON(needs.is_docker.outputs.docker_images)) != ''
        uses: akhilerm/tag-push-action@85bf542f43f5f2060ef76262a67ee3607cb6db37
        with:
          src: ${{ env.LOCAL_TAG }}
          dst: |
            ${{ steps.meta.outputs.tags }}
  docker_finalize:
    name: Finalize docker
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_merged
      - is_pushed_tag
      - is_docker
    if: |
      !failure() && !cancelled() &&
      needs.is_docker.result == 'success' &&
      needs.is_pr_merged.result != needs.is_pushed_tag.result &&
      join(fromJSON(needs.is_docker.outputs.docker_images)) != ''
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.is_docker.outputs.docker_images) }}
        target: ${{ fromJSON(needs.is_docker.outputs.bake_targets) }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Get version from tags
        id: version_tag
        run: |
          tag="$(git tag --points-at HEAD | tail -n1)"
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "semver=$(npx -q -y -- semver -c -l "${tag}")" >> $GITHUB_OUTPUT
          echo "describe=$(git describe --tags --always --dirty | cat)" >> $GITHUB_OUTPUT
      - name: Sanitize target strings
        id: strings
        env:
          raw_target: ${{ matrix.target }}
          raw_platform: ${{ matrix.platform }}
        run: |
          target="$(echo "${raw_target}" | sed 's/[^[:alnum:]]/-/g')"
          echo "target=${target}" >> $GITHUB_OUTPUT

          if [ "${target}" != 'default' ]
          then
            if [ "${{ inputs.docker_invert_tags }}" = "true" ]
            then
              echo "prefix=${target}-" >> $GITHUB_OUTPUT
            else
              echo "suffix=-${target}" >> $GITHUB_OUTPUT
            fi
          fi

          if [ -n "${raw_platform}" ]
          then
            echo "platform=$(echo "${raw_platform}" | sed 's/[^[:alnum:]]/-/g')" >> $GITHUB_OUTPUT
          fi
      - name: Generate image tags
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96
        with:
          images: |
            ${{ matrix.image }}
          tags: |
            type=raw,value=${{ github.base_ref || github.ref_name }}
            type=raw,value=${{ steps.version_tag.outputs.tag }}
            type=raw,value=${{ steps.version_tag.outputs.semver }}
          flavor: |
            latest=${{ steps.version_tag.outputs.semver != '' }}
            prefix=${{ steps.strings.outputs.prefix }},onlatest=true
            suffix=${{ steps.strings.outputs.suffix }},onlatest=true
      - name: Login to GitHub Container Registry
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}
      - name: Publish final tags
        uses: akhilerm/tag-push-action@85bf542f43f5f2060ef76262a67ee3607cb6db37
        with:
          src: ${{ matrix.image }}:${{ steps.strings.outputs.prefix }}${{ github.event.pull_request.head.sha || github.event.head_commit.id }}${{ steps.strings.outputs.suffix }}
          dst: |
            ${{ steps.meta.outputs.tags }}
      - name: Strip docker.io prefix
        if: |
          startsWith(matrix.image, 'docker.io') || !contains(matrix.image, '.')
        id: dockerhub
        env:
          IMAGE: ${{ matrix.image }}
        run: |
          echo "repository=${IMAGE#*/}" >> $GITHUB_OUTPUT
      - name: Update DockerHub Description
        if: steps.dockerhub.outputs.repository != '' && github.base_ref == github.event.repository.default_branch
        continue-on-error: true
        uses: peter-evans/dockerhub-description@202973a37c8a723405c0c5f0a71b6d99db470dae
        with:
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}
          repository: ${{ steps.dockerhub.outputs.repository }}
          readme-filepath: ./README.md
  balena_publish:
    name: Publish balena
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - is_balena
      - npm_test
      - custom_test
      - docker_test
      - cargo_test
      - python_test
    if: |
      !failure() && !cancelled() &&
      needs.is_balena.result == 'success' &&
      needs.is_pr_open.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.is_balena.outputs.balena_slugs) }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: balena-io/deploy-to-balena-action@37a5bffc1bc94c70d04fe71ddf3bb19f54d0dab6
        id: balena_deploy
        with:
          balena_token: ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}
          environment: ${{ inputs.balena_environment }}
          fleet: ${{ matrix.slug }}
          source: ${{ inputs.working_directory }}
          registry_secrets: |
            {
              "ghcr.io": {
                "username": "${{ github.actor }}",
                "password": "${{ secrets.GITHUB_TOKEN }}"
              },
              "docker.io": {
                "username": "${{ secrets.DOCKERHUB_USER }}",
                "password": "${{ secrets.DOCKERHUB_TOKEN }}"
              }
            }
      - name: Generate release notes
        id: release_notes
        run: |
          set -ea
          # prevent git from existing with 141
          set +o pipefail
          previous_tag="$(git --no-pager tag --list --sort=-version:refname "v*.*.*" --merged | head -n2 | tail -n1)"
          release_notes_file="$(mktemp)"
          git log ${previous_tag}..${{ github.event.pull_request.head.sha || github.event.head_commit.id }} --pretty=reference > "${release_notes_file}"
          echo "file=${release_notes_file}" >> $GITHUB_OUTPUT
      - name: Update balena release notes
        run: |
          set -ea
          release_notes="$(cat < '${{ steps.release_notes.outputs.file }}' | jq -R -s .)"
          app_id="$(curl --silent --retry 3 --fail \
            "https://api.${{ inputs.balena_environment }}/v6/application?\$filter=slug%20eq%20%27${{ matrix.slug }}%27&\$select=id" \
            -H 'Content-Type: application/json' \
            -H 'Authorization: Bearer ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}' \
            | jq -r '.d[].id')"
          release_id='${{ steps.balena_deploy.outputs.release_id }}'
          if [[ -n $release_notes ]] && [[ -n $app_id ]] && [[ -n $release_id ]]; then
              curl --silent --retry 3 --fail \
                -X PATCH "https://api.${{ inputs.balena_environment }}/v6/release?\$filter=belongs_to__application%20eq%20${app_id}%20and%20id%20eq%20${release_id}" \
                -H 'Content-Type: application/json' \
                -H 'Authorization: Bearer ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}' \
                -d "{\"note\":${release_notes}}"
          fi
  balena_finalize:
    name: Finalize balena
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_merged
      - is_pushed_tag
      - is_balena
    if: |
      !failure() && !cancelled() &&
      needs.is_balena.result == 'success' &&
      needs.is_pr_merged.result != needs.is_pushed_tag.result
    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.is_balena.outputs.balena_slugs) }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: balena-io/deploy-to-balena-action@37a5bffc1bc94c70d04fe71ddf3bb19f54d0dab6
        id: balena_deploy
        with:
          balena_token: ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}
          environment: ${{ inputs.balena_environment }}
          fleet: ${{ matrix.slug }}
          source: ${{ inputs.working_directory }}
          registry_secrets: |
            {
              "ghcr.io": {
                "username": "${{ github.actor }}",
                "password": "${{ secrets.GITHUB_TOKEN }}"
              },
              "docker.io": {
                "username": "${{ secrets.DOCKERHUB_USER }}",
                "password": "${{ secrets.DOCKERHUB_TOKEN }}"
              }
            }
      - name: Generate release notes
        id: release_notes
        run: |
          set -ea
          # prevent git from existing with 141
          set +o pipefail
          previous_tag="$(git --no-pager tag --list --sort=-version:refname "v*.*.*" --merged | head -n2 | tail -n1)"
          release_notes_file="$(mktemp)"
          git log ${previous_tag}..${{ github.event.pull_request.head.sha || github.event.head_commit.id }} --pretty=reference > "${release_notes_file}"
          echo "file=${release_notes_file}" >> $GITHUB_OUTPUT
      - name: Update balena release notes
        run: |
          set -ea
          release_notes="$(cat < '${{ steps.release_notes.outputs.file }}' | jq -R -s .)"
          app_id="$(curl --silent --retry 3 --fail \
            "https://api.${{ inputs.balena_environment }}/v6/application?\$filter=slug%20eq%20%27${{ matrix.slug }}%27&\$select=id" \
            -H 'Content-Type: application/json' \
            -H 'Authorization: Bearer ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}' \
            | jq -r '.d[].id')"
          release_id='${{ steps.balena_deploy.outputs.release_id }}'
          if [[ -n $release_notes ]] && [[ -n $app_id ]] && [[ -n $release_id ]]; then
              curl --silent --retry 3 --fail \
                -X PATCH "https://api.${{ inputs.balena_environment }}/v6/release?\$filter=belongs_to__application%20eq%20${app_id}%20and%20id%20eq%20${release_id}" \
                -H 'Content-Type: application/json' \
                -H 'Authorization: Bearer ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}' \
                -d "{\"note\":${release_notes}}"
          fi
  python_test:
    name: Test python poetry
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - is_python
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_open.result == 'success' &&
      needs.is_python.outputs.python_poetry == 'true'
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(needs.is_python.outputs.python_versions) }}
    outputs:
      package: ${{ steps.meta.outputs.package }}
      version: ${{ steps.meta.outputs.version }}
      branch_tag: ${{ steps.meta.outputs.branch_tag }}
      sha_tag: ${{ steps.meta.outputs.sha_tag }}
      version_tag: ${{ steps.meta.outputs.version_tag }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Get version from tags
        id: version_tag
        run: |
          tag="$(git tag --points-at HEAD | tail -n1)"
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "semver=$(npx -q -y -- semver -c -l "${tag}")" >> $GITHUB_OUTPUT
          echo "describe=$(git describe --tags --always --dirty | cat)" >> $GITHUB_OUTPUT
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Run poetry install
        run: |
          poetry install
      - name: Add linters and pytest to poetry
        run: |
          dep_list=`poetry show`
          if (grep -wq ^flake8 <<< "$dep_list") && \
             (grep -wq ^pydocstyle <<< "$dep_list") && \
             (grep -wq ^pytest <<< "$dep_list")
          then
            echo "Dev dependencies already installed"
          else
            poetry add --group dev flake8@latest pydocstyle@latest pytest@latest
          fi
      - name: Lint with flake8
        run: |
          poetry run flake8 --max-line-length=120 --benchmark --extend-ignore=E203
      - name: Lint with pydocstyle
        run: |
          poetry run pydocstyle
      - name: Test with pytest
        run: |
          poetry run pytest tests/
      - name: Generate metadata
        id: meta
        run: |
          package="$(grep '^name = \"' pyproject.toml | awk -F[\"\"] '{print $2}')"
          version="${{ steps.version_tag.outputs.semver }}"
          branch_tag="$(echo '${{ github.event.pull_request.head.ref }}' | sed 's/[^[:alnum:]]/-/g')"
          sha_tag="${branch_tag}-${{ github.event.pull_request.head.sha }}"
          version_tag="${version}-${branch_tag}-${{ github.event.pull_request.head.sha }}"

          echo "package=${package}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "branch_tag=${branch_tag}" >> $GITHUB_OUTPUT
          echo "sha_tag=${sha_tag}" >> $GITHUB_OUTPUT
          echo "version_tag=${version_tag}" >> $GITHUB_OUTPUT
  website_publish:
    name: Publish website
    runs-on: ${{fromJSON(inputs.runs_on)}}
    env:
      CF_BRANCH: ${{ github.event.pull_request.head.ref || github.event.repository.default_branch }}
    needs:
      - is_pr_open
      - is_pr_merged
      - is_pushed_tag
      - is_website
      - npm_test
      - custom_test
      - docker_test
      - cargo_test
      - python_test
    if: |
      !failure() && !cancelled() &&
      needs.is_website.result == 'success'
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: 18
      - name: Docusaurus Builder
        if: |
          needs.is_website.outputs.has_readme == 'true' &&
          inputs.docusaurus_website != false
        uses: product-os/docusaurus-builder@3db0af63d585b2daa4d4bb38b004914804761221
        with:
          repo: ${{ github.event.repository.name }}
          org: ${{ github.repository_owner }}
          default_branch: ${{ github.event.repository.default_branch }}
          url: https://${{ inputs.cloudflare_website }}.pages.dev/
      - name: Custom Website Builder
        if: |
          inputs.docusaurus_website == false
        run: npm run deploy-docs --if-present
      - name: Update deploy branch for merged PRs
        if: needs.is_pr_open.result != 'success'
        run: |
          echo "CF_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@4c10c1822abba527d820b29e6333e7f5dac2cabd
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          wranglerVersion: 2.12.0
          preCommands: wrangler --version
          command: pages publish --branch ${{ env.CF_BRANCH }} --project-name=${{ inputs.cloudflare_website }} build/ | tee -a $GITHUB_STEP_SUMMARY
  github_clean:
    name: Clean GitHub release
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_closed
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_closed.result == 'success'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Delete draft GitHub release
        run: gh release delete --yes '${{ github.event.pull_request.head.ref }}' || true
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
  github_publish:
    name: Publish Github release
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - npm_publish
      - cargo_publish
      - custom_publish
      - is_pr_open
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_open.result == 'success'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Delete draft GitHub release
        run: gh release delete --yes '${{ github.event.pull_request.head.ref }}' || true
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
      - name: Download all artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          path: ${{ runner.temp }}
      - name: Check if any release artifacts exist
        id: gh_artifacts
        env:
          GH_ARTIFACTS: ${{ runner.temp }}/gh-release-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
        run: |
          set -ea

          artifact_count=0
          [ -d "$GH_ARTIFACTS" ] && \
              artifact_count=$(ls "$GH_ARTIFACTS" | wc -l | sed 's/^ *//;s/ *$//')
          echo "count=$artifact_count" >> $GITHUB_OUTPUT
      - name: Publish artifacts
        if: steps.gh_artifacts.outputs.count != '0'
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          token: ${{ steps.github_tokens.outputs.trusted || false }}
          name: ${{ github.event.pull_request.head.ref }}
          tag_name: ${{ github.event.pull_request.head.ref }}
          draft: true
          prerelease: true
          files: ${{ runner.temp }}/gh-release-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}/*
  github_finalize:
    name: Finalize GitHub release
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_merged
      - is_pushed_tag
      - versioned_source
      - tagged_source
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_merged.result != needs.is_pushed_tag.result
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Get version from tags
        id: version_tag
        run: |
          tag="$(git tag --points-at HEAD | tail -n1)"
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "semver=$(npx -q -y -- semver -c -l "${tag}")" >> $GITHUB_OUTPUT
          echo "describe=$(git describe --tags --always --dirty | cat)" >> $GITHUB_OUTPUT
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Generate release notes
        id: release_notes
        run: |
          set -ea
          # prevent git from existing with 141
          set +o pipefail
          previous_tag="$(git --no-pager tag --list --sort=-version:refname "v*.*.*" --merged | head -n2 | tail -n1)"
          release_notes_file="$(mktemp)"
          git log ${previous_tag}..${{ github.event.pull_request.head.sha || github.event.head_commit.id }} --pretty=reference > "${release_notes_file}"
          echo "file=${release_notes_file}" >> $GITHUB_OUTPUT
      - name: Finalize GitHub release (if any)
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
        run: |
          set -ea

          if gh release view '${{ github.event.pull_request.head.ref }}'; then
            gh release edit '${{ github.event.pull_request.head.ref }}' \
              --notes-file '${{ steps.release_notes.outputs.file }}' \
              --title '${{ steps.version_tag.outputs.tag }}' \
              --tag '${{ steps.version_tag.outputs.tag }}' \
              --prerelease='${{ inputs.github_prerelease }}' \
              --draft=false

            if [[ ${{ inputs.github_prerelease }} =~ false ]]; then
                release_id="$(gh api "/repos/${{ github.repository }}/releases/tags/${{ steps.version_tag.outputs.tag }}" \
                  -H 'Accept: application/vnd.github+json' | jq -r .id)"
                gh api --method PATCH "/repos/${{ github.repository }}/releases/${release_id}" \
                  -H 'Accept: application/vnd.github+json' \
                  -F make_latest=true
            fi
          else
            echo "No release found for the current PR"
          fi
  cargo_test:
    name: Test rust
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - is_cargo
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_open.result == 'success' &&
      needs.is_cargo.outputs.cargo == 'true'
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.is_cargo.outputs.cargo_targets) }}
    outputs:
      package: ${{ steps.meta.outputs.package }}
      version: ${{ steps.meta.outputs.version }}
      branch_tag: ${{ steps.meta.outputs.branch_tag }}
      sha_tag: ${{ steps.meta.outputs.sha_tag }}
      version_tag: ${{ steps.meta.outputs.version_tag }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Get version from tags
        id: version_tag
        run: |
          tag="$(git tag --points-at HEAD | tail -n1)"
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "semver=$(npx -q -y -- semver -c -l "${tag}")" >> $GITHUB_OUTPUT
          echo "describe=$(git describe --tags --always --dirty | cat)" >> $GITHUB_OUTPUT
      - name: Set up toolchain ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust_toolchain }}
          targets: ${{ matrix.target }}
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --check
      - name: Install cross
        run: cargo install cross
      - name: Lint with clippy
        run: cross -v clippy --all-targets --all-features -- -D warnings
      - name: Run tests for toolchain ${{ matrix.target }}
        run: cross -v test --target ${{ matrix.target }}
      - name: Generate metadata
        id: meta
        run: |
          package="$(grep '^name = \"' Cargo.toml | awk -F[\"\"] '{print $2}')"
          version="${{ steps.version_tag.outputs.semver }}"
          branch_tag="$(echo '${{ github.event.pull_request.head.ref }}' | sed 's/[^[:alnum:]]/-/g')"
          sha_tag="${branch_tag}-${{ github.event.pull_request.head.sha }}"
          version_tag="${version}-${branch_tag}-${{ github.event.pull_request.head.sha }}"

          echo "package=${package}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "branch_tag=${branch_tag}" >> $GITHUB_OUTPUT
          echo "sha_tag=${sha_tag}" >> $GITHUB_OUTPUT
          echo "version_tag=${version_tag}" >> $GITHUB_OUTPUT
  cargo_publish:
    name: Publish rust
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_cargo
      - npm_test
      - custom_test
      - docker_test
      - cargo_test
      - python_test
    if: |
      !failure() && !cancelled() &&
      needs.cargo_test.result == 'success' &&
      inputs.rust_binaries == true
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.is_cargo.outputs.cargo_targets) }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set up toolchain ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust_toolchain }}
          targets: ${{ matrix.target }}
      - name: Install cross
        run: cargo install cross
      - name: Build release for toolchain ${{ matrix.target }}
        run: cross -v build --release --target ${{ matrix.target }}
      - name: Install LLVM
        run: sudo apt-get install -y llvm
      - name: LLVM strip
        run: llvm-strip target/${{ matrix.target }}/release/${{ needs.cargo_test.outputs.package }}
      - name: Compress
        run: |
          tar -czvf ${{ needs.cargo_test.outputs.package }}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release ${{ needs.cargo_test.outputs.package }}
      - name: Upload artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: gh-release-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ needs.cargo_test.outputs.package }}-${{ matrix.target }}.tar.gz
          retention-days: 1
  cargo_finalize:
    name: Finalize rust
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_merged
      - is_pushed_tag
      - is_cargo
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_merged.result != needs.is_pushed_tag.result &&
      needs.is_cargo.outputs.cargo == 'true'
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set up toolchain ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
      - name: Publish crate to ${{ env.CARGO_REGISTRY }}
        env:
          CARGO_REGISTRY_DEFAULT: ${{ env.CARGO_REGISTRY }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -n "$CARGO_REGISTRY_TOKEN" ]; then
            cargo publish
          fi
  custom_test:
    name: Test custom
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - is_custom
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_open.result == 'success' &&
      needs.is_custom.outputs.custom_test == 'true'
    strategy:
      fail-fast: false
      matrix:
        value: ${{ fromJSON(needs.is_custom.outputs.custom_test_matrix) }}
        os: ${{ fromJSON(inputs.tests_run_on || inputs.custom_runs_on) }}
    steps:
      - name: Reject external custom actions
        if: |
          github.event.pull_request.head.repo.full_name != github.repository &&
          inputs.restrict_custom_actions == true
        run: |
          echo "::error::Custom actions are disabled for external contributors and will be skipped. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set the matrix value env var
        run: |
          echo "matrix_value=${{ matrix.value }}" >> $GITHUB_ENV
          echo "os_value=${{ matrix.os }}" >> $GITHUB_ENV
      - uses: ./.github/actions/test
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
          variables: ${{ toJSON(vars) }}
  custom_publish:
    name: Publish custom
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - is_custom
      - npm_test
      - custom_test
      - docker_test
      - cargo_test
      - python_test
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_open.result == 'success' &&
      needs.is_custom.outputs.custom_publish == 'true'
    strategy:
      fail-fast: false
      matrix:
        value: ${{ fromJSON(needs.is_custom.outputs.custom_publish_matrix) }}
        os: ${{ fromJSON(inputs.tests_run_on || inputs.custom_runs_on) }}
    steps:
      - name: Reject external custom actions
        if: |
          github.event.pull_request.head.repo.full_name != github.repository &&
          inputs.restrict_custom_actions == true
        run: |
          echo "::error::Custom actions are disabled for external contributors and will be skipped. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set the matrix value env var
        run: |
          echo "matrix_value=${{ matrix.value }}" >> $GITHUB_ENV
          echo "os_value=${{ matrix.os }}" >> $GITHUB_ENV
      - uses: ./.github/actions/publish
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
          variables: ${{ toJSON(vars) }}
  custom_finalize:
    name: Finalize custom
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_merged
      - is_pushed_tag
      - is_custom
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_merged.result != needs.is_pushed_tag.result &&
      needs.is_custom.outputs.custom_finalize == 'true'
    strategy:
      fail-fast: false
      matrix:
        value: ${{ fromJSON(needs.is_custom.outputs.custom_finalize_matrix) }}
        os: ${{ fromJSON(inputs.tests_run_on || inputs.custom_runs_on) }}
    steps:
      - name: Reject external custom actions
        if: |
          github.event.pull_request.head.repo.full_name != github.repository &&
          inputs.restrict_custom_actions == true
        run: |
          echo "::error::Custom actions are disabled for external contributors and will be skipped. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set the matrix value env var
        run: |
          echo "matrix_value=${{ matrix.value }}" >> $GITHUB_ENV
          echo "os_value=${{ matrix.os }}" >> $GITHUB_ENV
      - uses: ./.github/actions/finalize
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
          variables: ${{ toJSON(vars) }}
  custom_clean:
    name: Clean custom
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(inputs.tests_run_on || inputs.custom_runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_closed
      - is_custom
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_closed.result == 'success' &&
      needs.is_custom.outputs.custom_clean == 'true'
    steps:
      - name: Reject external custom actions
        if: |
          github.event.pull_request.head.repo.full_name != github.repository &&
          inputs.restrict_custom_actions == true
        run: |
          echo "::error::Custom actions are disabled for external contributors and will be skipped. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: ./.github/actions/clean
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
          variables: ${{ toJSON(vars) }}
  custom_always:
    name: Always custom
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(inputs.tests_run_on || inputs.custom_runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - custom_test
      - custom_publish
      - custom_finalize
      - custom_clean
      - is_custom
    if: |
      always() &&
      needs.is_custom.outputs.custom_always == 'true'
    steps:
      - name: Reject external custom actions
        if: |
          github.event.pull_request.head.repo.full_name != github.repository &&
          inputs.restrict_custom_actions == true
        run: |
          echo "::error::Custom actions are disabled for external contributors and will be skipped. \
            Please contact a member of the organization for assistance."
          exit 1
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: ./.github/actions/always
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
          variables: ${{ toJSON(vars) }}
  protect_branch:
    name: Protect branch
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_open.result == 'success' &&
      inputs.protect_branch == true &&
      github.event.pull_request.head.repo.full_name == github.repository &&
      github.event.repository.default_branch == github.event.pull_request.base.ref
    outputs:
      result: ${{ steps.apply_branch_protection_rules.outputs.result }}
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    env:
      BRANCH_PROTECTION_URI: repos/${{ github.repository }}/branches/${{ github.event.repository.default_branch }}/protection
    steps:
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Check if PR is draft
        id: is_draft
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh pr view ${{ github.event.pull_request.number }} --json isDraft | jq -e '.isDraft == true'
          then
            echo "dynamic=true" >> $GITHUB_OUTPUT
          else
            echo "dynamic=false" >> $GITHUB_OUTPUT
          fi

          if [ "${{ github.event.pull_request.draft }}" = "true" ]
          then
            echo "static=true" >> $GITHUB_OUTPUT
          else
            echo "static=false" >> $GITHUB_OUTPUT
          fi
      - name: Get protection rules
        id: get_protection_rules
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
        run: |
          result="$(gh api ${{ env.BRANCH_PROTECTION_URI }} || true)"
          message="$(echo "${result}" | jq -r .message)"

          if [[ "$message" =~ null ]]; then
            echo "result=$(echo "${result}" | jq '. | @json')" >> $GITHUB_OUTPUT
          elif [[ -z "$message" ]] || [[ "$message" =~ 'Not Found'|'Branch not protected' ]]; then
            # If there are no existing protections then use an empty object
            echo 'result={}' >> $GITHUB_OUTPUT
          else
            echo  "::error::Failed to get branch protection rules ${message} ${result} "
            exit 1
          fi
      - name: Parse and prepare protection rules
        id: parse_prepare_protection_rules
        env:
          REQUIRED_STATUS_CHECKS: ${{ inputs.required_status_checks }}
        run: |
          jsondata=${{ steps.get_protection_rules.outputs.result }}

          required_status_checks__strict=$(echo $jsondata | jq ".required_status_checks.strict // true")

          old_required_approving_review_count="$(echo $jsondata | jq '.required_pull_request_reviews.required_approving_review_count // 0')"
          echo "old_required_approving_review_count=$old_required_approving_review_count" >> $GITHUB_OUTPUT

          # Remove any existing required Flowzone or ResinCI checks from the repo settings
          # Leave other required checks (eg. Jenkins, CircleCI)
          # Add the current required status checks from the input to the required checks
          # This avoids blocking PRs when jobs are renamed and the old name was marked as required
          required_status_checks__contexts=$(echo $jsondata | \
            jq ".required_status_checks.contexts // [] |
              map(select(
                test(\"^${{ inputs.job_name }}\";\"i\") or
                test(\"^resinci\";\"i\") | not
              )) |
              . + ${REQUIRED_STATUS_CHECKS} | unique
            ")

          if [ $(echo ${required_status_checks__contexts} | jq 'length') -lt 1 ]
          then
            echo "::error::Not enough required status checks to apply branch protection"
            exit 0
          fi

          code="$(diff -Z <(echo ${required_status_checks__contexts} | jq 'sort_by(.)') <(echo ${jsondata} | jq '.required_status_checks.contexts // [] | sort_by(.)') > required_checks.diff; echo $?)"

          if [ ${code} -eq 0 ] && [ ${old_required_approving_review_count} -eq ${{ inputs.required_approving_review_count }} ]
          then
            echo "::debug::Branch protection rules are unchanged, skipping update"
            exit 0
          else
            cat required_checks.diff
          fi

          required_pull_request_reviews__dismiss_stale_reviews=$(echo $jsondata | jq ".required_pull_request_reviews.dismiss_stale_reviews // false")
          required_pull_request_reviews__require_code_owner_reviews=$(echo $jsondata | jq ".required_pull_request_reviews.require_code_owner_reviews // false")
          required_pull_request_reviews__dismissal_restrictions__users=$(echo $jsondata | jq ".required_pull_request_reviews.dismissal_restrictions.users // []")
          required_pull_request_reviews__dismissal_restrictions__teams=$(echo $jsondata | jq ".required_pull_request_reviews.dismissal_restrictions.teams // []")
          required_pull_request_reviews__dismissal_restrictions__apps=$(echo $jsondata | jq ".required_pull_request_reviews.dismissal_restrictions.apps // []")
          allow_force_pushes=$(echo $jsondata | jq ".allow_force_pushes.enabled // false")
          required_signatures=$(echo $jsondata | jq ".required_signatures.enabled // false")
          allow_deletions=$(echo $jsondata | jq ".allow_deletions.enabled // false")
          required_linear_history=$(echo $jsondata | jq ".required_linear_history.enabled // false")
          enforce_admins=$(echo $jsondata | jq ".enforce_admins.enabled // false")
          block_creations=$(echo $jsondata | jq ".block_creations.enabled // false")
          required_conversation_resolution=$(echo $jsondata | jq ".required_conversation_resolution.enabled // false")

          newjson=$(cat <<-END
            {
              "required_status_checks": {
                  "strict": ${required_status_checks__strict},
                  "contexts": ${required_status_checks__contexts}
              },
              "required_pull_request_reviews": {
                  "dismissal_restrictions": {
                      "users": ${required_pull_request_reviews__dismissal_restrictions__users},
                      "teams": ${required_pull_request_reviews__dismissal_restrictions__teams},
                      "apps": ${required_pull_request_reviews__dismissal_restrictions__apps}
                  },
                  "dismiss_stale_reviews": ${required_pull_request_reviews__dismiss_stale_reviews},
                  "require_code_owner_reviews": ${required_pull_request_reviews__require_code_owner_reviews},
                  "required_approving_review_count": ${{ inputs.required_approving_review_count }},
                  "bypass_pull_request_allowances": {
                      "users": [],
                      "teams": []
                  }
              },
              "enforce_admins": ${enforce_admins},
              "required_signatures": ${required_signatures},
              "restrictions": null,
              "required_linear_history": ${required_linear_history},
              "allow_force_pushes": ${allow_force_pushes},
              "allow_deletions": ${allow_deletions},
              "block_creations": ${block_creations},
              "required_conversation_resolution": ${required_conversation_resolution}
            }
          END
          )

          # unsupported restrictions outside of Github organisations
          if [[ -z '${{ github.event.organization }}' ]]; then
              newjson="$(echo "${newjson}" | jq -r 'del(.required_pull_request_reviews.dismissal_restrictions, .required_pull_request_reviews.bypass_pull_request_allowances)')"
          fi

          result=$(echo "${newjson}" | jq '. | @json' )
          echo "result=${result}" >> $GITHUB_OUTPUT
      - name: Disable PR auto-merge
        if: |
          steps.is_draft.outputs.dynamic != 'true' &&
          fromJSON(steps.parse_prepare_protection_rules.outputs.old_required_approving_review_count) > fromJSON(inputs.required_approving_review_count)
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
        run: |
          for pr in $(gh pr list --state=open --draft=false --json=number | jq -r '.[].number')
          do
            gh pr merge ${pr} --disable-auto || true
          done
      - name: Apply branch protection rules
        id: apply_branch_protection_rules
        if: |
          steps.is_draft.outputs.dynamic != 'true' &&
          steps.parse_prepare_protection_rules.outputs.result != ''
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
        run: |
          result="$(echo '${{ fromJSON(steps.parse_prepare_protection_rules.outputs.result) }}' \
            | gh api --method PUT ${{ env.BRANCH_PROTECTION_URI }} --input -)"
          message="$(echo "${result}" | jq -r .message)"
          if ! [[ $message =~ null ]]; then
            echo "::error::Failed to apply branch protection rules with ${message} ${result} "
            exit 1
          fi
          echo "::notice::Branch protection rules have been updated"
          new_required_approving_review_count="$(echo "$result" | jq '.required_pull_request_reviews.required_approving_review_count')"
          echo "new_required_approving_review_count=${new_required_approving_review_count}" >> $GITHUB_OUTPUT
          # here the number of required approvals sent to the gh API is checked back from the PUT response from GH api
          # Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers (successful checks => merge) .
          if [[  ${new_required_approving_review_count} -ne ${{ inputs.required_approving_review_count }} ]]; then
            echo "::warning::Failed to set required approvers count. Check that branch protection is enabled on your repo and try again."
          fi
          DELIMITER=$(echo $RANDOM | md5sum | head -c 32)
          echo "result<<${DELIMITER}" >> $GITHUB_OUTPUT
          echo "${result}" >> $GITHUB_OUTPUT
          echo "${DELIMITER}" >> $GITHUB_OUTPUT
  repo_config:
    name: Apply repo settings
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_merged
    if: |
      !failure() && !cancelled() &&
      needs.is_pr_merged.result == 'success' &&
      inputs.repo_config == true
    steps:
      - name: Check for GitHub App private key
        id: gh_app_private_key
        shell: bash
        run: |
          if [ -n '${{ secrets.GH_APP_PRIVATE_KEY }}' ]
          then
              echo 'found=true' >> $GITHUB_OUTPUT
          else
              echo 'found=false' >> $GITHUB_OUTPUT
          fi
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        if: steps.gh_app_private_key.outputs.found == 'true'
        id: gh_app_installation_token
        with:
          app_id: ${{ inputs.app_id }}
          installation_id: ${{ inputs.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          permissions: ${{ inputs.token_scope }}
      - name: Map GitHub tokens to trusted/untrusted
        id: github_tokens
        shell: bash
        env:
          IS_EXTERNAL: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
          AUTO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_TOKEN: ${{ steps.gh_app_installation_token.outputs.token || secrets.FLOWZONE_TOKEN }}
        run: |
          if [ "${IS_EXTERNAL}" = "true" ]
          then
            echo "untrusted=${AUTO_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "untrusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
            echo "trusted=${INPUT_TOKEN}" >> $GITHUB_OUTPUT
          fi
      - name: Configure repository
        env:
          GH_DEBUG: "true"
          GH_PAGER: cat
          GH_PROMPT_DISABLED: "true"
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ steps.github_tokens.outputs.trusted || false }}
        run: |
          # only change repository visibility if explicitly set to one of the permissible values
          visibility=''
          if [[ '${{ inputs.repo_visibility }}' =~ private|public|internal ]]; then
              gh repo edit '${{ github.repository }}' \
                --visibility '${{ inputs.repo_visibility }}'
          fi

          if [[ -n '${{ inputs.repo_description }}' ]]; then
              gh repo edit '${{ github.repository }}' \
                --description '${{ inputs.repo_description }}'
          fi

          if [[ -n '${{ inputs.repo_homepage }}' ]]; then
              homepage='${{ inputs.repo_homepage }}'
          elif [[ -n '${{ inputs.cloudflare_website }}' ]]; then
              homepage='https://${{ inputs.cloudflare_website }}.pages.dev'
          else
              homepage=''
          fi
          [[ -n "${homepage}" ]] && gh repo edit '${{ github.repository }}' \
            --homepage "${homepage}"

          # HTTP 422: This organization does not allow private repository forking
          if ! gh repo edit '${{ github.repository }}' \
            --allow-forking=${{ inputs.repo_allow_forking }}; then
              echo '::warning::Failed to configure some repository settings.'
          fi

          # FIXME: https://github.com/cli/cli/issues/6652#issuecomment-1323908232
          gh repo edit '${{ github.repository }}' \
            --default-branch=${{ inputs.repo_default_branch }} \
            --delete-branch-on-merge=${{ inputs.repo_delete_branch_on_merge }} \
            --enable-auto-merge=${{ inputs.repo_enable_auto_merge }} \
            --enable-issues=${{ inputs.repo_enable_issues }} \
            --enable-merge-commit=${{ inputs.repo_enable_merge_commit }} \
            --enable-projects=${{ inputs.repo_enable_projects }} \
            --enable-rebase-merge=${{ inputs.repo_enable_rebase_merge }} \
            --enable-squash-merge=${{ inputs.repo_enable_squash_merge }} \
            --enable-wiki=${{ inputs.repo_enable_wiki }}

          # allow_update_branch not currently available for update via gh-cli
          gh api --method PATCH '/repos/${{ github.repository }}' \
            -H "Accept: application/vnd.github+json" \
            -F allow_update_branch='${{ inputs.repo_allow_update_branch }}'
  all_tests:
    name: All tests
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - tagged_source
      - npm_test
      - docker_test
      - python_test
      - cargo_test
      - custom_test
    if: |
      always() &&
      needs.is_pr_open.result != 'skipped'
    steps:
      - name: Reject failed jobs
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]
          then
            echo "One or more jobs have failed"
            exit 1
          fi
      - name: Reject cancelled jobs
        run: |
          if [ "${{ contains(needs.*.result, 'cancelled') }}" = "true" ]
          then
            echo "One or more jobs were cancelled"
            exit 1
          fi
  all_jobs:
    name: All jobs
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - is_pr_open
      - versioned_source
      - tagged_source
      - is_npm
      - is_docker
      - is_python
      - is_cargo
      - is_balena
      - is_custom
      - is_website
      - all_tests
      - npm_publish
      - docker_publish
      - balena_publish
      - website_publish
      - github_publish
      - cargo_publish
      - custom_publish
      - custom_always
      - protect_branch
    if: |
      always() &&
      needs.is_pr_open.result != 'skipped'
    steps:
      - name: Reject failed jobs
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]
          then
            echo "One or more jobs have failed"
            exit 1
          fi
      - name: Reject cancelled jobs
        run: |
          if [ "${{ contains(needs.*.result, 'cancelled') }}" = "true" ]
          then
            echo "One or more jobs were cancelled"
            exit 1
          fi
