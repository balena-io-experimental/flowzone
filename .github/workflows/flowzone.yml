name: Flowzone

on:
  workflow_call:
    secrets:
      FLOWZONE_TOKEN:
        description: "Personal access token (PAT) for the GitHub service account with admin/owner permissions"
        required: true
      GPG_PRIVATE_KEY:
        description: "GPG private key exported with `gpg --armor --export-secret-keys ...` to sign commits"
        required: false
      GPG_PASSPHRASE:
        description: "Passphrase to decrypt GPG private key"
        required: false
      NPM_TOKEN:
        description: "The npm auth token to use for publishing"
        required: false
      GHCR_TOKEN:
        description: "A personal access token to publish to the GitHub Container Registry, will use FLOWZONE_TOKEN if unset"
        required: false
      DOCKERHUB_USER:
        description: "Username to publish to the Docker Hub container registry"
        required: false
      DOCKER_REGISTRY_USER:
        description: "Deprecated, use DOCKERHUB_USER instead"
        required: false
      DOCKERHUB_TOKEN:
        description: "A personal access token to publish to the Docker Hub container registry"
        required: false
      DOCKER_REGISTRY_PASS:
        description: "Deprecated, use DOCKERHUB_TOKEN instead"
        required: false
      BALENA_API_KEY:
        description: "API key for pushing releases to balena applications"
        required: false
      BALENA_API_KEY_PUSH:
        description: "Deprecated, use BALENA_API_KEY instead"
        required: false
      COMPOSE_VARS:
        description: "Optional base64 encoded docker-compose `.env` file for testing Docker images"
        required: false
    inputs:
      working_directory:
        description: "GitHub actions working directory"
        type: string
        required: false
        default: "."
      docker_images:
        description: "Comma-delimited string of Docker images (without tags) to publish (skipped if empty)"
        type: string
        required: false
        default: ghcr.io/${{ github.repository }}
      balena_slugs:
        description: "Comma-delimited string of balenaCloud apps, fleets, or blocks to deploy (skipped if empty)"
        type: string
        required: false
        default: ${{ github.repository }}
      npm_registry:
        description: "Registry for publishing npm projects (skipped if empty)"
        type: string
        required: false
        default: registry.npmjs.org
      docker_platforms:
        description: "Comma-delimited string of Docker target platforms"
        type: string
        required: false
        default: |
          linux/amd64,
          linux/arm64,
          linux/arm/v7
      docker_context:
        description: "Docker build context directory"
        type: string
        required: false
      docker_file:
        description: "Path to the Dockerfile relative to the context"
        type: string
        required: false
      docker_target:
        description: "Sets the target stage to build"
        type: string
        required: false
      node_versions:
        description: "Comma-delimited string of Node.js versions to test"
        type: string
        required: false
        default: |
          14.x,
          16.x,
          18.x
      skip_versioning:
        description: "Set to true to skip adding a version commit on top of the original source"
        type: boolean
        required: false
        default: false
      protect_branch:
        description: "Set to false to disable updating branch protection rules after a successful run"
        type: boolean
        required: false
        default: true
      required_approving_review_count:
        description: "Setting this value to zero effectively means merge==deploy without approval(s)"
        type: string
        required: false
        default: "1"
      required_status_checks:
        description: "Comma-delimited string of additional required status checks for branch protection"
        type: string
        required: false
        default: |
          "Flowzone / Draft npm",
          "Flowzone / Draft docker"
      verbose:
        description: "Enable shell command tracing"
        type: boolean
        required: false
        default: false

env:
  GHCR_USER: "flowzone" # does not seem to matter what is used here
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN || secrets.FLOWZONE_TOKEN }}

jobs:
  ###################################################
  ## common
  ###################################################

  context_check:
    name: Check context
    runs-on: ubuntu-latest
    # limit to only Flowzone supported event types here as all other jobs depend on this one
    if: |
      ( github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.action == 'opened') ||
      ( github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.action == 'synchronize') ||
      ( github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.action == 'closed' && github.event.pull_request.merged == true) ||
      ( github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.author.name, inputs.git_commit_author) != true )

    outputs:
      balena_slugs: ${{ steps.balena_slugs.outputs.build }}
      docker_platforms: ${{ steps.docker_platforms.outputs.build }}
      node_versions: ${{ steps.node_versions.outputs.build }}
      docker_images: ${{ steps.docker_images.outputs.build }}
      shell: ${{ steps.shell.outputs.value || 'bash' }}

    defaults:
      run:
        working-directory: .
        shell: bash

    steps:
      # - name: Dump GitHub context
      #   run: |
      #     echo '${{ toJSON(github) }}'

      - name: Convert balena_slugs to a JSON array
        id: balena_slugs
        uses: kanga333/json-array-builder@v0.1.0
        env:
          INPUT: ${{ inputs.balena_slugs }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","

      - name: Convert docker_platforms to a JSON array
        id: docker_platforms
        uses: kanga333/json-array-builder@v0.1.0
        env:
          INPUT: ${{ inputs.docker_platforms }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","

      - name: Convert node_versions to a JSON array
        id: node_versions
        uses: kanga333/json-array-builder@v0.1.0
        env:
          INPUT: ${{ inputs.node_versions }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","

      - name: Convert docker_images to a newline list
        id: docker_images
        env:
          INPUT: ${{ inputs.docker_images }}
        run: |
          string="${INPUT//','/'%0A'}"
          echo "::set-output name=build::${string}"

      - name: Enable shell tracing
        if: inputs.verbose == true
        id: shell
        run: |
          echo "::set-output name=value::$(echo 'bash --noprofile --norc -eo pipefail -x {0}')"

  project_types:
    name: Project types
    runs-on: ubuntu-latest
    needs: [context_check, package_source]

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    outputs:
      npm: ${{ steps.npm.outputs.enabled }}
      npm_private: ${{ steps.npm.outputs.private }} # can be null or unset
      docker: ${{ steps.docker.outputs.enabled }}
      balena: ${{ steps.balena.outputs.enabled }}

      custom_draft: ${{ steps.custom.outputs.draft }}
      custom_finalize: ${{ steps.custom.outputs.finalize }}
      custom_test: ${{ steps.custom.outputs.test }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - name: Check for package.json
        id: npm
        run: |
          if test -f "package.json"
          then
            echo "found package.json"
            echo "::set-output name=enabled::true"
            echo "::set-output name=private::$(jq -r '.private' package.json)"
          else
            echo ::set-output name=enabled::"false"
          fi

      - name: Check for docker-compose.test.yml
        id: docker
        run: |
          if [ -f docker-compose.test.yml ] && [ -f docker-compose.yml ]; then
            echo "found docker-compose.test.yml"
            echo ::set-output name=enabled::"true"
          else
            echo ::set-output name=enabled::"false"
          fi

      - name: Check for balena.yml
        id: balena
        run: |
          if test -f balena.yml
          then
            echo "found balena.yml"
            echo ::set-output name=enabled::"true"
          else
            echo ::set-output name=enabled::"false"
          fi

      - name: Check for custom jobs
        id: custom
        working-directory: .
        run: |
          test -d .github/flowzone/draft && echo "::set-output name=draft::true"
          test -d .github/flowzone/finalize && echo "::set-output name=finalize::true"
          test -d .github/flowzone/test && echo "::set-output name=test::true"

  # this job will always run so it can be used as a branch rule
  # and other stages can depend on it to control job order
  all_drafts:
    name: Draft checkpoint
    runs-on: ubuntu-latest
    needs:
      [
        context_check,
        project_types,
        package_source,
        docker_draft,
        npm_draft,
        custom_draft,
        balena_push,
      ]
    # always run to avoid being skipped when dependencies are skipped
    if: always()

    steps:
      # loop over all needed jobs and fail this job if any of them failed
      - name: Check results
        run: |
          for result in $(echo '${{ toJSON(needs.*.result) }}' | jq -cr '.[]')
          do
            test "${result}" = "success" && continue
            test "${result}" = "skipped" && continue
            echo "Exiting with overall result ${result}"
            exit 1
          done

  # this job will always run so it can be used as a branch rule
  # and other stages can depend on it to control job order
  all_tests:
    name: Test checkpoint
    runs-on: ubuntu-latest
    needs:
      [
        context_check,
        project_types,
        package_source,
        docker_test,
        npm_test,
        custom_test,
      ]
    # always run to avoid being skipped when dependencies are skipped
    if: always()

    steps:
      # loop over all needed jobs and fail this job if any of them failed
      - name: Check results
        run: |
          for result in $(echo '${{ toJSON(needs.*.result) }}' | jq -cr '.[]')
          do
            test "${result}" = "success" && continue
            test "${result}" = "skipped" && continue
            echo "Exiting with overall result ${result}"
            exit 1
          done

  protect_branch:
    name: Protect branch
    runs-on: ubuntu-latest
    needs: [context_check, all_drafts, all_tests]
    if: |
      always() &&
      inputs.protect_branch == true &&
      github.event_name == 'pull_request' &&
      needs.all_drafts.result == 'success' &&
      needs.all_tests.result == 'success'

    outputs:
      result: ${{ steps.apply_branch_protection_rules.outputs.result }}

    defaults:
      run:
        working-directory: .
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Apply branch protection rules
        id: apply_branch_protection_rules
        run: |
          url='${{ github.api_url }}/repos/${{ github.repository }}/branches/${{ github.event.repository.default_branch }}/protection'

          result="$(curl --silent -X PUT "${url}" \
            -H 'Accept: application/vnd.github+json' \
            -H 'Authorization: Bearer ${{ secrets.FLOWZONE_TOKEN }}' \
            -d '{
            "required_status_checks": {
              "strict": true,
              "contexts": [
                "Flowzone / Check context",
                "Flowzone / Test checkpoint",
                "Flowzone / Draft checkpoint",
                "Flowzone / Protect branch",
                ${{ inputs.required_status_checks }}
              ]
            },
            "enforce_admins": false,
            "required_pull_request_reviews": {
              "dismissal_restrictions": {
                "users": [],
                "teams": []
              },
              "dismiss_stale_reviews": false,
              "require_code_owner_reviews": false,
              "required_approving_review_count": ${{ inputs.required_approving_review_count }},
              "bypass_pull_request_allowances": {
                "users": [],
                "teams": []
              }
            },
            "restrictions": null,
            "required_linear_history": false,
            "allow_force_pushes": false,
            "allow_deletions": false,
            "block_creations": false,
            "required_conversation_resolution": false
          }')"

          echo ::set-output name=result::"${result}"

  ###################################################
  ## source
  ###################################################

  package_source:
    name: Package source
    runs-on: ubuntu-latest
    needs: [context_check]

    defaults:
      run:
        working-directory: .
        shell: ${{ needs.context_check.outputs.shell }}

    outputs:
      new_tag: ${{ steps.version_check.outputs.new_tag }}
      version: ${{ steps.version_check.outputs.version }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Import GPG key for signing commits
        if: inputs.skip_versioning == false && github.event_name == 'pull_request'
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      # install and run versionist and balena-versionist
      # extract the latest version from the changelog
      - name: Run versionist
        if: inputs.skip_versioning == false && github.event_name == 'pull_request'
        id: versionist
        run: |
          npm install -g balena-versionist versionist
          balena-versionist
          git status --porcelain

      # exit if versionist didn't change anything or the changelog could not be parsed
      - name: Check versionist results
        if: inputs.skip_versioning == false && github.event_name == 'pull_request'
        id: version_check
        run: |
          test -n "$(git status --porcelain)" || { echo "Failed to version any files, did you include a Change-type?" ; exit 1 ; }
          version="$(grep -E '^# v[0-9]+\.[0-9]+\.[0-9]+|^## [0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n1 | awk '{print $2}' | tr -d 'v')"
          test -n "${version}" || { echo "Failed to parse version from changelog!" ; exit 1 ; }
          echo "::set-output name=version::${version}"
          echo "::set-output name=new_tag::v${version}"

      # create a versioned commit only if the the version has changed
      - name: Create versioned commit
        if: steps.version_check.outputs.new_tag != ''
        env:
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
          TAG: ${{ steps.version_check.outputs.new_tag }}
        run: |
          git add --all
          git commit -m "${TAG}" --allow-empty
          git tag -a "${TAG}" -m "${TAG}" -f
          git log -n 2

      # push the versioned commit only if the PR is merged
      - name: Push versioned commit
        if: github.event.pull_request.merged == true && steps.version_check.outputs.new_tag != ''
        run: |
          git push origin HEAD:${{ github.base_ref }} --follow-tags

      # https://github.com/actions/upload-artifact#maintaining-file-permissions-and-case-sensitive-files
      - name: Compress source
        run: tar -cvf /tmp/source.tar .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}
          path: /tmp/source.tar

  ###################################################
  ## npm
  ###################################################

  npm_test:
    name: Test npm
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source]
    if: |
      needs.project_types.outputs.npm == 'true' &&
      github.event.pull_request.merged == false &&
      github.event_name == 'pull_request'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    strategy:
      fail-fast: false
      matrix:
        node_version: ${{ fromJSON(needs.context_check.outputs.node_versions) }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "${{ matrix.node_version }}"

      - name: Install dependencies
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Run build
        run: npm run build --if-present

      - name: Run tests
        run: npm test

  npm_draft:
    name: Draft npm
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source, all_tests]
    if: |
      inputs.npm_registry != '' &&
      needs.project_types.outputs.npm_private != 'true'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - name: Generate tags
        id: meta
        run: |
          package="$(jq -r '.name' package.json)"
          version="$(jq -r '.version' package.json)"
          branch_tag="$(echo '${{ github.event.pull_request.head.ref }}' | sed 's/[^[:alnum:]]/-/g')"
          sha_tag="${branch_tag}-${{ github.event.pull_request.head.sha }}"
          version_tag="${version}-${branch_tag}-${{ github.event.pull_request.head.sha }}"

          echo "::set-output name=package::${package}"
          echo "::set-output name=version::${version}"
          echo "::set-output name=branch_tag::${branch_tag}"
          echo "::set-output name=sha_tag::${sha_tag}"
          echo "::set-output name=version_tag::${version_tag}"

      - name: Login to registry
        run: |
          echo '//${{ inputs.npm_registry }}/:_authToken=${{ secrets.NPM_TOKEN }}' > ~/.npmrc
          npm whoami

      - name: Publish draft release
        run: |
          npm --loglevel=verbose --logs-max=0 --no-git-tag-version version ${{ steps.meta.outputs.version_tag }}
          npm --loglevel=verbose --logs-max=0 publish --tag=${{ steps.meta.outputs.sha_tag }}
          npm --loglevel=verbose --logs-max=0 dist-tag add ${{ steps.meta.outputs.package }}@${{ steps.meta.outputs.version_tag }} ${{ steps.meta.outputs.branch_tag }}

  npm_finalize:
    name: Finalize npm
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source]
    if: |
      inputs.npm_registry != '' &&
      needs.project_types.outputs.npm == 'true' &&
      needs.project_types.outputs.npm_private != 'true' &&
      (github.event_name != 'pull_request' || github.event.pull_request.merged == true )

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - name: Login to registry
        run: |
          echo '//${{ inputs.npm_registry }}/:_authToken=${{ secrets.NPM_TOKEN }}' > ~/.npmrc
          npm whoami

      - name: Publish final release
        run: |
          npm --loglevel=verbose --logs-max=0 publish --tag "latest"

  ###################################################
  ## docker
  ###################################################

  docker_test:
    name: Test docker
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source]
    if: |
      needs.project_types.outputs.docker == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    env:
      COMPOSE_VARS: ${{ secrets.COMPOSE_VARS }}

    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.context_check.outputs.docker_platforms) }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
          install: true

      - name: Sanitize suffix
        id: suffix
        run: |
          echo "::set-output name=string::$(echo ${{ matrix.platform }} | sed -e 's|linux/||' -e 's|/||')"

      - name: Generate Docker labels and tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          # even though this build is not published directly, extra image tags
          # can be used in docker-compose.test.yml and for pulling cache
          images: |
            ${{ needs.context_check.outputs.docker_images }}
            ${{ github.repository }}
            sut
          tags: |
            type=raw,value=${{ steps.suffix.outputs.string }}
            type=raw,value=edge
          flavor: |
            latest=true

      - name: Build and load
        id: build
        uses: docker/build-push-action@v3
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max
          cache-from: |
            type=gha
            ${{ steps.meta.outputs.tags }}
          context: ${{ inputs.docker_context || inputs.working_directory }}
          file: ${{ inputs.docker_file }}
          target: ${{ inputs.docker_target }}
          tags: |
            ${{ steps.meta.outputs.tags }}
          load: true
          push: false
          # outputs: type=docker,dest=/tmp/docker.tar

      - name: Run docker-compose tests
        run: |
          if [[ ! -z "${COMPOSE_VARS}" ]]; then
            echo ${COMPOSE_VARS} | base64 --decode > .env
          fi
          docker compose -f docker-compose.yml -f docker-compose.test.yml up --no-build --exit-code-from sut

      - name: Docker save to file
        run: |
          docker save ${{ github.repository }}:${{ steps.suffix.outputs.string }} > /tmp/docker.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-${{ steps.suffix.outputs.string }}
          path: /tmp/docker.tar
          retention-days: 1

  docker_draft:
    name: Draft docker
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source, all_tests]
    if: |
      inputs.docker_images != ''

    defaults:
      run:
        working-directory: .
        shell: ${{ needs.context_check.outputs.shell }}

    env:
      LOCAL_IMAGE: localhost:5000/${{ github.repository }}

    services:
      registry:
        image: registry:2.8.1
        ports:
          - 5000:5000

    steps:
      - name: Login to GitHub Container Registry
        continue-on-error: true
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Login to Docker Hub
        continue-on-error: true
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp

      - name: Load images
        run: |
          for image in /tmp/docker-*/*.tar
          do
            ARCHVARIANT="$(dirname "${image}" | awk -F- '{print $NF}')"
            docker load -i "${image}" | tee /dev/stderr | awk '{print $NF}' |
              xargs -i docker tag {} "${{ env.LOCAL_IMAGE }}:${ARCHVARIANT}"
            docker push "${{ env.LOCAL_IMAGE }}:${ARCHVARIANT}"
          done

      # see https://github.com/estesp/manifest-tool to understand template
      - name: Create multi-arch manifest
        id: manifest
        run: |
          docker run --rm --network=host mplatform/manifest-tool:alpine-v2.0.5 push from-args \
            --platforms ${{ join(fromJSON(needs.context_check.outputs.docker_platforms)) }} \
            --template ${{ env.LOCAL_IMAGE }}:ARCHVARIANT \
            --target ${{ env.LOCAL_IMAGE }}:latest

      - name: Generate draft labels and tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.docker_images }}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.sha }}
            type=raw,value=${{ github.event.pull_request.head.ref }}
            type=ref,event=pr
          flavor: |
            latest=false

      - name: Publish draft tags
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ env.LOCAL_IMAGE }}:latest
          dst: |
            ${{ steps.meta.outputs.tags }}

  docker_finalize:
    name: Finalize docker
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source]
    if: |
      inputs.docker_images != '' &&
      needs.project_types.outputs.docker == 'true' &&
      (github.event_name != 'pull_request' || github.event.pull_request.merged == true)

    defaults:
      run:
        working-directory: .
        shell: ${{ needs.context_check.outputs.shell }}

    env:
      LOCAL_IMAGE: localhost:5000/${{ github.repository }}

    services:
      registry:
        image: registry:2.8.1
        ports:
          - 5000:5000

    steps:
      - name: Login to GitHub Container Registry
        continue-on-error: true
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Login to Docker Hub
        continue-on-error: true
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}

      # merged pull requests
      - name: Generate versioned labels and tags
        id: versioned_meta
        if: github.event.pull_request.merged == true && needs.versioned_source.outputs.version != ''
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.docker_images }}
          tags: |
            type=raw,value=${{ needs.versioned_source.outputs.version }}
          flavor: |
            latest=true

      # merged pull requests with versioning disabled
      - name: Generate edge labels and tags
        id: edge_meta
        if: github.event.pull_request.merged == true && needs.versioned_source.outputs.version == ''
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.docker_images }}
          tags: |
            type=raw,value=edge
          flavor: |
            latest=false

      # tag pushed to main branch
      - name: Generate tagged labels and tags
        id: tagged_meta
        if: github.event_name == 'push'
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.docker_images }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
          flavor: |
            latest=auto

      # try to pull existing draft releases that we can republish as final
      - name: Pull draft images
        env:
          IMAGES: ${{ needs.context_check.outputs.docker_images }}
        run: |
          for image in ${IMAGES}
          do
            docker pull ${image}:${{ github.event.pull_request.head.sha }} || continue
            docker tag ${image}:${{ github.event.pull_request.head.sha }} ${{ env.LOCAL_IMAGE }}:latest
            docker push ${{ env.LOCAL_IMAGE }}:latest
            success=1
            break
          done
          test -n "${success}"

      # only one of the destination lines should have values based on the meta restrictions above
      - name: Publish final tags
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ env.LOCAL_IMAGE }}:latest
          dst: |
            ${{ steps.versioned_meta.outputs.tags }}
            ${{ steps.edge_meta.outputs.tags }}
            ${{ steps.tagged_meta.outputs.tags }}

  ###################################################
  ## balena
  ###################################################

  balena_push:
    name: Push balena
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source, all_tests]
    if: needs.project_types.outputs.balena == 'true'

    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.context_check.outputs.balena_slugs) }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - uses: balena-io/deploy-to-balena-action@v0.13.0
        with:
          balena_token: ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}
          fleet: ${{ matrix.slug }}
          versionbot: false # disable the included versionbot branch checkout
          source: ${{ inputs.working_directory }}

  ###################################################
  ## custom
  ###################################################

  custom_test:
    name: Test custom
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source]
    if: |
      needs.project_types.outputs.custom_test == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - name: Call custom action
        uses: ./.github/flowzone/test
        with:
          who-to-greet: "Mona the Octocat"

  custom_draft:
    name: Draft custom
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source, all_tests]
    if: |
      needs.project_types.outputs.custom_draft == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - name: Call custom action
        uses: ./.github/flowzone/draft
        with:
          who-to-greet: "Mona the Octocat"

  custom_finalize:
    name: Finalize custom
    runs-on: ubuntu-latest
    needs: [context_check, project_types, package_source]
    if: |
      needs.project_types.outputs.custom_finalize == 'true' &&
      (github.event_name != 'pull_request' || github.event.pull_request.merged == true)

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Download source artifact
        uses: actions/download-artifact@v3
        with:
          name: source-${{ github.event.pull_request.head.sha }}

      - name: Extract source artifact
        working-directory: .
        run: tar -xvf source.tar

      - name: Call custom action
        uses: ./.github/flowzone/finalize
        with:
          who-to-greet: "Mona the Octocat"
