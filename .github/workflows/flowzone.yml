name: Flowzone

on:
  workflow_call:
    secrets:
      FLOWZONE_TOKEN:
        description: "Personal access token (PAT) for the GitHub service account with admin/owner permissions"
        required: true
      GPG_PRIVATE_KEY:
        description: "GPG private key exported with `gpg --armor --export-secret-keys ...` to sign commits"
        required: false
      GPG_PASSPHRASE:
        description: "Passphrase to decrypt GPG private key"
        required: false
      NPM_TOKEN:
        description: "The npm auth token to use for publishing"
        required: false
      GHCR_TOKEN:
        description: "A personal access token to publish to the GitHub Container Registry, will use FLOWZONE_TOKEN if unset"
        required: false
      DOCKER_REGISTRY_USER:
        description: "Username to publish to the Docker Hub container registry"
        required: false
      DOCKER_REGISTRY_PASS:
        description: "A personal access token to publish to the Docker Hub container registry"
        required: false
      BALENA_API_KEY_PUSH:
        description: "API key for pushing releases to balena applications"
        required: false
      COMPOSE_VARS:
        description: "Optional base64 encoded docker-compose `.env` file for testing Docker images"
        required: false
    inputs:
      working_directory:
        description: "GitHub actions working directory"
        type: string
        required: false
        default: "."
      dockerhub_repo:
        description: "Docker Hub repository for Docker projects, skipped if empty"
        type: string
        required: false
      ghcr_repo:
        description: "GitHub Container Registry repository for Docker projects, skipped if empty"
        type: string
        required: false
        default: ${{ github.repository }}
      docker_platforms:
        description: "Comma-delimited string of Docker target platforms"
        type: string
        required: false
        default: |
          linux/amd64,
          linux/arm64,
          linux/arm/v7
      docker_context:
        description: "Docker build context directory"
        type: string
        required: false
      docker_file:
        description: "Path to the Dockerfile relative to the context"
        type: string
        required: false
      docker_target:
        description: "Sets the target stage to build"
        type: string
        required: false
      balena_slugs:
        description: "Comma-delimited string of balenaCloud apps, fleets, or blocks to deploy"
        type: string
        required: false
        default: |
          ${{ github.repository }}-amd64,
          ${{ github.repository }}-aarch64,
          ${{ github.repository }}-armv7hf
      node_versions:
        description: "Comma-delimited string of Node.js versions to test"
        type: string
        required: false
        default: |
          14.x,
          16.x,
          18.x
      npm_registry:
        description: "Registry for publishing npm projects, skipped if empty"
        type: string
        required: false
        default: registry.npmjs.org
      skip_versioning:
        description: "Set to true to skip adding a version commit on top of the original source"
        type: boolean
        required: false
        default: false
      protect_branch:
        description: "Set to false to disable updating branch protection rules after a successful run"
        type: boolean
        required: false
        default: true
      required_approving_review_count:
        description: "Setting this value to zero effectively means merge==deploy without approval(s)"
        type: string
        required: false
        default: "1"
      required_status_checks:
        description: "Comma-delimited string of additional required status checks for branch protection"
        type: string
        required: false
        default: |
          "Flowzone / npm publish",
          "Flowzone / docker publish",
          "Flowzone / balena all"
      verbose:
        description: "Enable shell command tracing"
        type: boolean
        required: false
        default: false

env:
  GHCR_USER: "flowzone" # does not seem to matter what is used here
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN || secrets.FLOWZONE_TOKEN }}

jobs:
  ###################################################
  ## GENERAL
  ###################################################

  context_check:
    name: Context check
    runs-on: ubuntu-latest
    # limit to only Flowzone supported event types here as all other jobs depend on this one
    if: |
      ( github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.action == 'opened') ||
      ( github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.action == 'synchronize') ||
      ( github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch && github.event.action == 'closed' && github.event.pull_request.merged == true) ||
      ( github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.event.head_commit.author.name, inputs.git_commit_author) != true )

    outputs:
      balena_slugs: ${{ steps.balena_slugs.outputs.build }}
      docker_platforms: ${{ steps.docker_platforms.outputs.build }}
      node_versions: ${{ steps.node_versions.outputs.build }}
      ghcr_repo: ${{ steps.ghcr_repo.outputs.value }}
      dockerhub_repo: ${{ steps.dockerhub_repo.outputs.value }}
      shell: ${{ steps.shell.outputs.value || 'bash' }}

    steps:
      # - name: Dump GitHub context
      #   run: |
      #     echo '${{ toJSON(github) }}'

      - name: Convert input to a JSON array
        id: balena_slugs
        uses: kanga333/json-array-builder@v0.1.0
        env:
          INPUT: ${{ inputs.balena_slugs }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","

      - name: Convert input to a JSON array
        id: docker_platforms
        uses: kanga333/json-array-builder@v0.1.0
        env:
          INPUT: ${{ inputs.docker_platforms }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","

      - name: Convert input to a JSON array
        id: node_versions
        uses: kanga333/json-array-builder@v0.1.0
        env:
          INPUT: ${{ inputs.node_versions }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","

      - name: Add ghcr.io prefix
        if: inputs.ghcr_repo != ''
        id: ghcr_repo
        run: |
          echo "::set-output name=value::$(echo ghcr.io/${{ inputs.ghcr_repo }})"

      - name: Add docker.io prefix
        if: inputs.dockerhub_repo != ''
        id: dockerhub_repo
        run: |
          echo "::set-output name=value::$(echo docker.io/${{ inputs.dockerhub_repo }})"

      - name: Enable shell tracing
        if: inputs.verbose == true
        id: shell
        run: |
          echo "::set-output name=value::$(echo 'bash --noprofile --norc -eo pipefail -x {0}')"

  source_check:
    name: Source check
    runs-on: ubuntu-latest
    needs: [context_check]

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    outputs:
      npm: ${{ steps.npm.outputs.enabled }}
      npm_access: ${{ steps.npm.outputs.access }}
      docker: ${{ steps.docker.outputs.enabled }}
      balena: ${{ steps.balena.outputs.enabled }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.FLOWZONE_TOKEN }}

      - name: Check for package.json
        id: npm
        run: |
          if test -f "package.json"
          then
            echo "found package.json"
            echo "::set-output name=enabled::true"
            if [[ "$(jq -r '.private' package.json)" =~ true ]]
            then
              echo "::set-output name=access::restricted"
            else
              echo "::set-output name=access::public"
            fi
          else
            echo ::set-output name=enabled::"false"
          fi
          

      - name: Check for docker-compose.test.yml
        id: docker
        run: |
          if [ -f docker-compose.test.yml ] && [ -f docker-compose.yml ]; then
            echo "found docker-compose.test.yml"
            echo ::set-output name=enabled::"true"
          else
            echo ::set-output name=enabled::"false"
          fi

      - name: Check for balena.yml
        id: balena
        run: |
          if test -f balena.yml
          then
            echo "found balena.yml"
            echo ::set-output name=enabled::"true"
          else
            echo ::set-output name=enabled::"false"
          fi

  protect_branch:
    name: Protect branch
    runs-on: ubuntu-latest
    # depend on all the jobs but allow them to be skipped
    needs: [context_check, source_check, versioned_source, docker_matrix, docker_publish, npm_matrix, npm_publish, balena_matrix, balena_all]
    if: |
      !failure() && !cancelled() && inputs.protect_branch == true && github.event_name == 'pull_request'

    outputs:
      result: ${{ steps.apply_branch_protection_rules.outputs.result }}

    defaults:
      run:
        working-directory: .
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Apply branch protection rules
        id: apply_branch_protection_rules
        run: |
          url='${{ github.api_url }}/repos/${{ github.repository }}/branches/${{ github.event.repository.default_branch }}/protection'

          result="$(curl --silent -X PUT "${url}" \
            -H 'Accept: application/vnd.github+json' \
            -H 'Authorization: Bearer ${{ secrets.FLOWZONE_TOKEN }}' \
            -d '{
            "required_status_checks": {
              "strict": true,
              "contexts": [
                "Flowzone / Context check",
                "Flowzone / Source check",
                "Flowzone / Protect branch",
                "Flowzone / Versioned source",
                ${{ inputs.required_status_checks }}
              ]
            },
            "enforce_admins": false,
            "required_pull_request_reviews": {
              "dismissal_restrictions": {
                "users": [],
                "teams": []
              },
              "dismiss_stale_reviews": false,
              "require_code_owner_reviews": false,
              "required_approving_review_count": ${{ inputs.required_approving_review_count }},
              "bypass_pull_request_allowances": {
                "users": [],
                "teams": []
              }
            },
            "restrictions": null,
            "required_linear_history": false,
            "allow_force_pushes": false,
            "allow_deletions": false,
            "block_creations": false,
            "required_conversation_resolution": false
          }')"

          echo ::set-output name=result::"${result}"

  ###################################################
  ## VERSIONING
  ###################################################

  versioned_source:
    name: Versioned source
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [context_check]

    defaults:
      run:
        working-directory: .
        shell: ${{ needs.context_check.outputs.shell }}

    outputs:
      tag: ${{ steps.versionist.outputs.tag }}
      version: ${{ steps.versionist.outputs.version }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.FLOWZONE_TOKEN }}
        
      - name: Import GPG key for signing commits
        id: import-gpg
        if: inputs.skip_versioning == false
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Run versionist
        id: versionist
        if: inputs.skip_versioning == false
        run: |
          test -f repo.yml || echo 'type: node' > repo.yml
          npm install -g balena-versionist versionist
          balena-versionist
          git status
          version="$(grep '^## ' CHANGELOG.md | head -n1 | awk '{print $2}')"
          if [ -n "${version}" ]
          then
            echo "::set-output name=tag::v${version}"
            echo "::set-output name=version::${version}"
          fi

      - name: Create versioned commit
        if: steps.versionist.outputs.tag != ''
        env:
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
          TAG: ${{ steps.versionist.outputs.tag }}
        run: |
          git add --all
          git commit -m "${TAG}" --allow-empty
          git tag -a "${TAG}" -m "${TAG}"
          git log -n 2

      - name: Push versioned commit
        if: github.event.pull_request.merged == true && steps.versionist.outputs.tag != ''
        run: |
          git push origin HEAD:${{ github.base_ref }} --follow-tags

      # https://github.com/actions/upload-artifact#maintaining-file-permissions-and-case-sensitive-files
      - name: Compress source
        run: tar -cvf /tmp/versioned-source.tar .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}
          path: /tmp/versioned-source.tar

  ###################################################
  ## npm
  ###################################################

  npm_matrix:
    name: npm
    runs-on: ubuntu-latest
    needs: [context_check, source_check, versioned_source]
    if: |
      needs.source_check.outputs.npm == 'true' &&
      github.event.pull_request.merged == false &&
      github.event_name == 'pull_request'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    strategy:
      fail-fast: false
      matrix:
        node_version: ${{ fromJSON(needs.context_check.outputs.node_versions) }}

    steps:
      - name: Download versioned source
        uses: actions/download-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}

      - name: Extract versioned source
        working-directory: .
        run: tar -xvf versioned-source.tar

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "${{ matrix.node_version }}"

      - name: Install dependencies
        run: |
          if [ -e package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Run build
        run: npm run build --if-present

      - name: Run tests
        run: npm test

  npm_publish:
    name: npm publish
    runs-on: ubuntu-latest
    needs: [context_check, source_check, versioned_source, npm_matrix]
    # allow publish to run even when matrix is skipped
    if: |
      needs.source_check.outputs.npm == 'true' && inputs.npm_registry != '' &&
      (github.event_name == 'pull_request' || github.event_name == 'push') &&
      !failure() && !cancelled() && needs.context_check.result == 'success' && needs.source_check.result == 'success' && needs.versioned_source.result == 'success'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Download versioned source
        uses: actions/download-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}

      - name: Extract versioned source
        working-directory: .
        run: tar -xvf versioned-source.tar

      - name: Generate tags
        id: meta
        run: |
          package="$(jq -r '.name' package.json)"
          version="$(jq -r '.version' package.json)"
          branch_tag="$(echo '${{ github.event.pull_request.head.ref }}' | sed 's/[^[:alnum:]]/-/g')"
          sha_tag="${branch_tag}-${{ github.event.pull_request.head.sha }}"
          version_tag="${version}-${branch_tag}-${{ github.event.pull_request.head.sha }}"

          echo "::set-output name=package::${package}"
          echo "::set-output name=version::${version}"
          echo "::set-output name=branch_tag::${branch_tag}"
          echo "::set-output name=sha_tag::${sha_tag}"
          echo "::set-output name=version_tag::${version_tag}"

      - name: Login to registry
        run: |
          echo '//${{ inputs.npm_registry }}/:_authToken=${{ secrets.NPM_TOKEN }}' > ~/.npmrc
          npm whoami

      - name: Publish draft release
        if: github.event.pull_request.merged == false && github.event_name == 'pull_request'
        run: |
          npm --loglevel=verbose --logs-max=0 --no-git-tag-version version ${{ steps.meta.outputs.version_tag }}
          npm --loglevel=verbose --logs-max=0 publish --access=${{ needs.source_check.outputs.npm_access }} --tag=${{ steps.meta.outputs.sha_tag }}
          npm --loglevel=verbose --logs-max=0 dist-tag add ${{ steps.meta.outputs.package }}@${{ steps.meta.outputs.version_tag }} ${{ steps.meta.outputs.branch_tag }}

      - name: Publish final release
        if: github.event.pull_request.merged == true || github.event_name == 'push'
        run: |
          npm --loglevel=verbose --logs-max=0 publish --access=${{ needs.source_check.outputs.npm_access }} --tag "latest"

  ###################################################
  ## docker
  ###################################################

  docker_matrix:
    name: Docker
    runs-on: ubuntu-latest
    needs: [context_check, source_check, versioned_source]
    if: |
      needs.source_check.outputs.docker == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    env:
      COMPOSE_VARS: ${{ secrets.COMPOSE_VARS }}
      LOCAL_IMAGE: localhost:5000/sut
      LOCAL_TAG: localhost:5000/sut:latest

    services:
      registry:
        image: registry:2.8.1
        ports:
          - 5000:5000

    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.context_check.outputs.docker_platforms) }}

    steps:
      - name: Login to GitHub Container Registry
        if: ${{ needs.context_check.outputs.ghcr_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Login to Docker Hub
        if: ${{ needs.context_check.outputs.dockerhub_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

      - name: Download versioned source
        uses: actions/download-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}

      - name: Extract versioned source
        working-directory: .
        run: tar -xvf versioned-source.tar

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
          install: true

      - name: Sanitize suffix
        id: suffix
        run: |
          echo "::set-output name=string::$(echo ${{ matrix.platform }} | sed -e 's|linux/||' -e 's|/||')"

      - name: Generate Docker labels and tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.ghcr_repo }}
            ${{ needs.context_check.outputs.dockerhub_repo }}
            ${{ env.LOCAL_IMAGE }}
          tags: |
            type=ref,event=pr,suffix=-${{ steps.suffix.outputs.string }}
            type=raw,value=${{ github.event.pull_request.head.ref }},suffix=-${{ steps.suffix.outputs.string }}
            type=raw,value=${{ github.event.pull_request.head.sha }},suffix=-${{ steps.suffix.outputs.string }}
          flavor: |
            latest=false

      - name: Build and load
        id: build
        uses: docker/build-push-action@v3
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max
          cache-from: |
            type=gha
            ${{ steps.meta.outputs.tags }}
            ${{ needs.context_check.outputs.ghcr_repo || env.LOCAL_IMAGE }}:latest
            ${{ needs.context_check.outputs.ghcr_repo || env.LOCAL_IMAGE }}:edge
            ${{ needs.context_check.outputs.dockerhub_repo || env.LOCAL_IMAGE }}:latest
            ${{ needs.context_check.outputs.dockerhub_repo || env.LOCAL_IMAGE }}:edge
          context: ${{ inputs.docker_context || inputs.working_directory }}
          file: ${{ inputs.docker_file }}
          target: ${{ inputs.docker_target }}
          # extra tags for convenience, can be used in docker-compose.test.yml
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ github.repository }}:latest
            sut:latest
            ${{ env.LOCAL_TAG }}
          load: true
          push: false

      - name: Run docker-compose tests
        run: |
          if [[ ! -z "${COMPOSE_VARS}" ]]; then
            echo ${COMPOSE_VARS} | base64 --decode > .env
          fi
          docker compose -f docker-compose.yml -f docker-compose.test.yml up --no-build --exit-code-from sut

      - name: Push image to local registry
        run: |
          docker push ${{ env.LOCAL_TAG }}

      - name: Push tags to public registries
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ env.LOCAL_TAG }}
          dst: |
            ${{ steps.meta.outputs.tags }}

  docker_publish:
    name: docker publish
    runs-on: ubuntu-latest
    needs: [context_check, source_check, versioned_source, docker_matrix]
    # allow publish to run even when matrix is skipped
    if: |
      needs.source_check.outputs.docker == 'true' &&
      (needs.context_check.outputs.ghcr_repo != '' || needs.context_check.outputs.dockerhub_repo != '') &&
      (github.event_name == 'pull_request' || github.event_name == 'push') &&
      !failure() && !cancelled() && needs.context_check.result == 'success' && needs.source_check.result == 'success' && needs.versioned_source.result == 'success'

    defaults:
      run:
        working-directory: .
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Login to GitHub Container Registry
        if: ${{ needs.context_check.outputs.ghcr_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Login to Docker Hub
        if: ${{ needs.context_check.outputs.dockerhub_repo != '' }}
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}

      - name: Generate draft labels and tags
        id: draft_meta
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.ghcr_repo }}
            ${{ needs.context_check.outputs.dockerhub_repo }}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.ref }}
            type=ref,event=pr
          flavor: |
            latest=false

      # use the versioned tag when merging PRs with versioning
      - name: Generate versioned labels and tags
        id: versioned_meta
        if: inputs.skip_versioning == false && github.event.pull_request.merged == true
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.ghcr_repo }}
            ${{ needs.context_check.outputs.dockerhub_repo }}
          tags: |
            type=raw,value=${{ needs.versioned_source.outputs.version }}
          flavor: |
            latest=true

      # use the 'edge' tag when merging PRs without versioning
      - name: Generate edge labels and tags
        id: edge_meta
        if: inputs.skip_versioning == true && github.event.pull_request.merged == true
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.ghcr_repo }}
            ${{ needs.context_check.outputs.dockerhub_repo }}
          tags: |
            type=raw,value=edge
          flavor: |
            latest=false

      # use the provided tag when tagging commits
      - name: Generate provided labels and tags
        id: tagged_meta
        if: github.event_name == 'push'
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.context_check.outputs.ghcr_repo }}
            ${{ needs.context_check.outputs.dockerhub_repo }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
          flavor: |
            latest=auto

      - name: Create multi-arch manifest
        if: needs.context_check.outputs.ghcr_repo != '' && github.event_name == 'pull_request' && github.event.pull_request.merged == false
        uses: pixelfederation/gh-action-manifest-tool@v0.1.0
        with:
          username: ${{ env.GHCR_USER }}
          password: ${{ env.GHCR_TOKEN }}
          platforms: ${{ join(fromJSON(needs.context_check.outputs.docker_platforms)) }}
          template: ${{ needs.context_check.outputs.ghcr_repo }}:${{ github.event.pull_request.head.sha }}-ARCHVARIANT
          target: ${{ needs.context_check.outputs.ghcr_repo }}:${{ github.event.pull_request.head.sha }}
          # see https://github.com/estesp/manifest-tool to understand template

      - name: Create multi-arch manifest
        if: needs.context_check.outputs.dockerhub_repo != '' && github.event_name == 'pull_request' && github.event.pull_request.merged == false
        uses: pixelfederation/gh-action-manifest-tool@v0.1.0
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}
          platforms: ${{ join(fromJSON(needs.context_check.outputs.docker_platforms)) }}
          template: ${{ needs.context_check.outputs.dockerhub_repo }}:${{ github.event.pull_request.head.sha }}-ARCHVARIANT
          target: ${{ needs.context_check.outputs.dockerhub_repo }}:${{ github.event.pull_request.head.sha }}
          # see https://github.com/estesp/manifest-tool to understand template

      - name: Publish tags
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ${{ needs.context_check.outputs.ghcr_repo || needs.context_check.outputs.dockerhub_repo }}:${{ github.event.pull_request.head.sha }}
          dst: |
            ${{ steps.draft_meta.outputs.tags }}
            ${{ steps.versioned_meta.outputs.tags }}
            ${{ steps.edge_meta.outputs.tags }}
            ${{ steps.tagged_meta.outputs.tags }}

  ###################################################
  ## balena
  ###################################################

  balena_matrix:
    name: balena
    runs-on: ubuntu-latest
    needs: [context_check, source_check, versioned_source]
    if: needs.source_check.outputs.balena == 'true'

    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.context_check.outputs.balena_slugs) }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      - name: Download versioned source
        uses: actions/download-artifact@v3
        with:
          name: versioned-source-${{ github.event.pull_request.head.sha }}

      - name: Extract versioned source
        working-directory: .
        run: tar -xvf versioned-source.tar

      - uses: balena-io/deploy-to-balena-action@v0.12.1
        with:
          balena_token: ${{ secrets.BALENA_API_KEY_PUSH }}
          fleet: ${{ matrix.slug }}
          versionbot: false # disable the included versionbot branch checkout
          source: ${{ inputs.working_directory }}

  balena_all:
    name: balena all
    runs-on: ubuntu-latest
    needs: [context_check, balena_matrix]

    defaults:
      run:
        working-directory: .
        shell: ${{ needs.context_check.outputs.shell }}

    steps:
      # just a catchall to ensure the matrix was successful so we can use this job as
      # branch protection without knowing all the matrices
      - run: echo "nothing to do!"
